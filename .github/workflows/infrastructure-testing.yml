name: Infrastructure Testing & Validation

on:
  push:
    branches:
      - main
      - develop
      - "consolidation/**"
      - "feature/**"
      - "release/**"
      - "hotfix/**"
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: "3.11"
  GO_VERSION: "1.21"
  NODE_VERSION: "18"

jobs:
  # Configuration and manifest validation
  validation:
    runs-on: ubuntu-latest
    name: Configuration Validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Validate YAML files
        run: |
          find . -name "*.yaml" -o -name "*.yml" | grep -v ".git" | xargs -I {} python -c "
          import yaml, sys
          try:
              with open('{}', 'r') as f: yaml.safe_load(f)
              print('✓ {}')
          except Exception as e:
              print('✗ {}: {}'.format('{}', e))
              sys.exit(1)
          "

      - name: Validate Helm charts
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          ./helm/validate-charts.sh

      - name: Validate Kubernetes manifests
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          find kubernetes/ -name "*.yaml" | xargs kubectl apply --dry-run=client -f

  # Security scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Comprehensive testing
  test:
    runs-on: ubuntu-latest
    needs: [validation, security]
    defaults:
      run:
        working-directory: ./

    strategy:
      matrix:
        test-suite: [python-tests, terraform-tests, helm-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        if: matrix.tool == 'terratest'
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Cache Go modules
        if: matrix.tool == 'terratest'
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        if: matrix.tool == 'terratest'
        run: go mod download

      - name: Run Terratest
        if: matrix.tool == 'terratest'
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: go test -v -timeout 60m github.com/tzervas/homelab-infra/testing/terraform/terratest

      - name: Set up Python
        if: matrix.tool == 'pytest'
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Python dependencies
        if: matrix.tool == 'pytest'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        if: matrix.tool == 'pytest'
        run: pytest --cov=.

      - name: Set up Node.js
        if: matrix.tool == 'helm-unittest'
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Helm
        if: matrix.tool == 'helm-unittest'
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Run Helm unittest
        if: matrix.tool == 'helm-unittest'
        run: helm unittest ${GITHUB_WORKSPACE}/helm/charts  -3

  performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install kubernetes psutil

      - name: Run Performance Benchmarks
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          python testing/performance/benchmarks.py \
            --endpoints https://gitlab.homelab.local/api/v4/projects https://prometheus.homelab.local/api/v1/status/config https://grafana.homelab.local/api/health \
            --load-test https://gitlab.homelab.local \
            --output benchmark-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v2
        with:
          name: benchmark-results
          path: benchmark-results.json
