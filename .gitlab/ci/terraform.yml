# Terraform-focused CI/CD pipeline components
# Provides Terraform workflow automation, provisioning, and validation

# ============================================================================
# TERRAFORM PLAN AND VALIDATION
# ============================================================================

terraform:plan:staging:
  stage: build
  image: hashicorp/terraform:latest
  script:
    - cd terraform
    - terraform init
    - terraform plan -var="environment=staging" -out=staging.tfplan
  rules:
    - changes:
        - terraform/**/*
  artifacts:
    paths:
      - terraform/staging.tfplan
    expire_in: 1 day
  tags:
    - homelab

terraform:plan:production:
  stage: build
  image: hashicorp/terraform:latest
  script:
    - cd terraform
    - terraform init
    - terraform plan -var="environment=production" -out=production.tfplan
  rules:
    - changes:
        - terraform/**/*
  artifacts:
    paths:
      - terraform/production.tfplan
    expire_in: 1 day
  tags:
    - homelab

# ============================================================================
# TERRAFORM APPLY
# ============================================================================

terraform:apply:staging:
  stage: deploy-staging
  image: hashicorp/terraform:latest
  environment:
    name: staging
  script:
    - cd terraform
    - terraform apply "staging.tfplan"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  tags:
    - homelab

terraform:apply:production:
  stage: deploy-production
  image: hashicorp/terraform:latest
  environment:
    name: production
  script:
    - cd terraform
    - terraform apply "production.tfplan"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
  tags:
    - homelab

# ============================================================================
# TERRAFORM STATE VALIDATION
# ============================================================================

terraform:validate:state:
  stage: verify
  image: python:3.11-alpine
  before_script:
    - apk add --no-cache bash
    - pip install --upgrade pip
    - pip install jsonschema
  script:
    - python scripts/testing/terraform_validator.py --output-format junit >
      terraform-state-validation-junit.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'
  artifacts:
    reports:
      junit: terraform-state-validation-junit.xml
    expire_in: 1 week
  tags:
    - homelab
