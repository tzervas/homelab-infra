---
# VM Creation and Configuration for Testing
# Creates a KVM/libvirt VM for testing the homelab deployment

- name: Create proper ansible tmp directory
  file:
    path: "/tmp/.ansible-{{ ansible_user }}/tmp"
    state: directory
    mode: '0700'
    owner: "{{ ansible_user }}"
  become: yes

- name: Check if libvirt is installed
  command: virsh --version
  register: virsh_check
  changed_when: false
  failed_when: false

- name: Install libvirt and KVM packages
  apt:
    name:
      - qemu-kvm
      - libvirt-daemon-system
      - libvirt-clients
      - bridge-utils
      - virtinst
      - cloud-image-utils
      - genisoimage
      - netcat-openbsd  # For port checking
    state: present
    update_cache: yes
  when: virsh_check.rc != 0

- name: Add user to libvirt group
  user:
    name: "{{ ansible_user }}"
    groups: libvirt
    append: yes

- name: Configure firewalld for libvirt
  block:
    - name: Check if firewalld is running
      systemd:
        name: firewalld
        state: started
      register: firewalld_service
      failed_when: false

    - name: Configure firewalld backend to iptables for libvirt compatibility
      lineinfile:
        path: /etc/firewalld/firewalld.conf
        regexp: '^FirewallBackend='
        line: 'FirewallBackend=iptables'
        backup: yes
      when: firewalld_service.changed or firewalld_service.state == "started"
      register: firewalld_config_changed

    - name: Restart firewalld if configuration changed
      systemd:
        name: firewalld
        state: restarted
      when: firewalld_config_changed.changed

  rescue:
    - name: Stop firewalld if configuration fails
      systemd:
        name: firewalld
        state: stopped
        enabled: no
      failed_when: false

- name: Start and enable libvirt service
  systemd:
    name: libvirtd
    state: started
    enabled: yes

- name: Create default network configuration
  copy:
    content: |
      <network>
        <name>default</name>
        <forward mode='nat'/>
        <bridge name='virbr0' stp='on' delay='0'/>
        <mac address='52:54:00:00:00:00'/>
        <ip address='192.168.122.1' netmask='255.255.255.0'>
          <dhcp>
            <range start='192.168.122.2' end='192.168.122.254'/>
          </dhcp>
        </ip>
      </network>
    dest: /tmp/default-network.xml
    mode: '0644'

- name: Define default network if not exists
  shell: virsh net-define /tmp/default-network.xml
  register: net_define_result
  failed_when:
    - net_define_result.rc != 0
    - "'already exists' not in net_define_result.stderr"
  changed_when: net_define_result.rc == 0

- name: Start default network
  shell: virsh net-start default
  register: net_start_result
  failed_when:
    - net_start_result.rc != 0
    - "'already active' not in net_start_result.stderr"
  changed_when: net_start_result.rc == 0

- name: Set network autostart
  shell: virsh net-autostart default
  register: net_autostart_result
  failed_when: false

- name: Verify default network is active
  shell: virsh net-list --all
  register: network_status

- name: Display network status
  debug:
    msg: "Network status: {{ network_status.stdout_lines }}"

- name: Check if test VM already exists
  command: virsh dominfo {{ vm_config.name }}
  register: vm_exists
  changed_when: false
  failed_when: false

- name: Remove existing test VM if it exists
  block:
    - name: Stop test VM if running
      command: virsh destroy {{ vm_config.name }}
      failed_when: false

    - name: Undefine existing test VM
      command: virsh undefine {{ vm_config.name }} --remove-all-storage
      failed_when: false

  when: vm_exists.rc == 0

- name: Create VM storage directory
  file:
    path: /var/lib/libvirt/images/{{ vm_config.name }}
    state: directory
    mode: '0755'

- name: Download Ubuntu cloud image
  get_url:
    url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
    dest: /var/lib/libvirt/images/ubuntu-22.04-server-cloudimg-amd64.img
    mode: '0644'
  register: cloud_image_download

- name: Create VM disk from cloud image
  command: >
    qemu-img create -f qcow2 -F qcow2 -b /var/lib/libvirt/images/ubuntu-22.04-server-cloudimg-amd64.img
    /var/lib/libvirt/images/{{ vm_config.name }}/{{ vm_config.name }}.qcow2 {{ vm_config.disk_size }}

- name: Create cloud-init user-data
  copy:
    content: |
      #cloud-config
      hostname: {{ vm_config.name }}
      manage_etc_hosts: true

      users:
        - name: kang
          sudo: ALL=(ALL) NOPASSWD:ALL
          groups: users, admin, wheel, sudo
          home: /home/kang
          shell: /bin/bash
          lock_passwd: false
          ssh_authorized_keys:
            - {{ lookup('file', '~/.ssh/id_ed25519.pub') }}

      ssh_pwauth: false
      disable_root: false

      package_update: true
      package_upgrade: true
      packages:
        - curl
        - wget
        - git
        - htop
        - nano
        - net-tools
        - ca-certificates
        - gnupg
        - lsb-release
        - apt-transport-https

      runcmd:
        - systemctl enable ssh
        - systemctl start ssh
        - echo 'VM setup complete' > /var/log/cloud-init-complete.log

      final_message: "The test VM is finally up, after $UPTIME seconds"
    dest: /var/lib/libvirt/images/{{ vm_config.name }}/user-data
    mode: '0644'

- name: Create cloud-init meta-data
  copy:
    content: |
      instance-id: {{ vm_config.name }}
      local-hostname: {{ vm_config.name }}
      network:
        version: 2
        ethernets:
          enp1s0:
            dhcp4: true
            dhcp-identifier: mac
    dest: /var/lib/libvirt/images/{{ vm_config.name }}/meta-data
    mode: '0644'

- name: Create cloud-init ISO
  command: >
    genisoimage -output /var/lib/libvirt/images/{{ vm_config.name }}/{{ vm_config.name }}-cloud-init.iso
    -volid cidata -joliet -rock /var/lib/libvirt/images/{{ vm_config.name }}/user-data
    /var/lib/libvirt/images/{{ vm_config.name }}/meta-data

- name: Create test VM
  command: >
    virt-install
    --name {{ vm_config.name }}
    --virt-type kvm
    --memory {{ vm_config.memory }}
    --vcpus {{ vm_config.vcpus }}
    --import
    --disk path=/var/lib/libvirt/images/{{ vm_config.name }}/{{ vm_config.name }}.qcow2,device=disk,bus=virtio
    --disk path=/var/lib/libvirt/images/{{ vm_config.name }}/{{ vm_config.name }}-cloud-init.iso,device=cdrom
    --graphics none
    --os-variant ubuntu22.04
    --network network=default,model=virtio
    --console pty,target_type=serial
    --noautoconsole
    --autostart

- name: Wait for VM to be running
  command: virsh domstate {{ vm_config.name }}
  register: vm_state
  until: vm_state.stdout.strip() == "running"
  retries: 30
  delay: 10

- name: Get VM IP address
  shell: >
    virsh domifaddr {{ vm_config.name }} | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1
  register: vm_ip
  until: vm_ip.stdout != ""
  retries: 20
  delay: 15

- name: Store VM IP for reference
  set_fact:
    vm_ip_address: "{{ vm_ip.stdout }}"

- name: Add VM to runtime inventory as cluster node
  add_host:
    name: test-vm
    groups: cluster
    ansible_host: "{{ vm_ip.stdout }}"
    ansible_user: kang
    ansible_ssh_private_key_file: "{{ lookup('env', 'HOMELAB_SSH_KEY_PATH') | default('~/.ssh/id_ed25519') }}"
    ansible_ssh_common_args: '-o ProxyJump={{ ansible_user }}@{{ ansible_host }} -o StrictHostKeyChecking=no'
    node_role: worker
    vm_ip_address: "{{ vm_ip.stdout }}"

- name: Display VM information
  debug:
    msg:
      - "🖥️  Test VM created successfully!"
      - "VM Name: {{ vm_config.name }}"
      - "IP Address: {{ vm_ip.stdout }}"
      - "Memory: {{ vm_config.memory }}MB"
      - "CPUs: {{ vm_config.vcpus }}"
      - "Disk: {{ vm_config.disk_size }}"

- name: Monitor VM boot process and SSH readiness
  block:
    - name: Wait for VM to respond to ping (network layer check)
      shell: ping -c 1 {{ vm_ip.stdout }}
      register: ping_result
      until: ping_result.rc == 0
      retries: 30
      delay: 10
      failed_when: false
      delegate_to: "{{ inventory_hostname }}"

    - name: Monitor VM boot progress via console output
      shell: |
        # Check if VM is still booting by looking at console activity
        timeout 5 virsh console {{ vm_config.name }} --force 2>/dev/null | head -10 || echo "Console unavailable"
      register: console_check
      failed_when: false
      delegate_to: "{{ inventory_hostname }}"

    - name: Display boot progress information
      debug:
        msg:
          - "VM Ping Status: {{ 'OK' if ping_result.rc == 0 else 'Failed' }}"
          - "Console Output Available: {{ 'Yes' if 'Console unavailable' not in console_check.stdout else 'No' }}"
          - "Checking SSH readiness..."

    - name: Configuration-driven SSH readiness check
      become: no
      shell: |
        #!/bin/bash
        HOST="{{ vm_ip.stdout }}"
        BASTION_HOST="{{ ansible_host }}"
        BASTION_USER="{{ ansible_user }}"
        TARGET_USER="kang"
        MAX_ATTEMPTS=30
        ATTEMPT=0
        SSH_KEY="{{ lookup('env', 'HOMELAB_SSH_KEY_PATH') | default('~/.ssh/id_ed25519') }}"
        DEPLOYMENT_PHASE="{{ phase | default('vm-test') }}"

        # SSH options
        SSH_OPTS="-i $SSH_KEY -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        BASTION_SSH_OPTS="$SSH_OPTS -o ProxyJump=$BASTION_USER@$BASTION_HOST"

        # Connection method based on deployment configuration
        USE_BASTION=true  # Default for VMs
        CONNECTION_TYPE="VM via bastion"

        case "$DEPLOYMENT_PHASE" in
          "vm-test"|"full-vm-test")
            # VMs always need bastion (192.168.122.x network)
            USE_BASTION=true
            CONNECTION_TYPE="VM via bastion ($BASTION_HOST)"
            ;;
          "bare-metal")
            # Bare metal: check if target is same as bastion
            if [[ "$HOST" == "$BASTION_HOST" ]]; then
              USE_BASTION=false
              CONNECTION_TYPE="Bare metal (direct to homelab server)"
            else
              USE_BASTION=true
              CONNECTION_TYPE="Bare metal node via bastion ($BASTION_HOST)"
            fi
            ;;
          *)
            # Unknown phase, default to bastion
            USE_BASTION=true
            CONNECTION_TYPE="Unknown phase - using bastion"
            ;;
        esac

        echo "🔍 Starting SSH readiness monitoring for $TARGET_USER@$HOST via bastion $BASTION_HOST"
        echo "Using SSH key: $SSH_KEY"
        echo "Bastion host: $BASTION_USER@$BASTION_HOST"

        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo ""
          echo "🔄 Attempt $ATTEMPT/$MAX_ATTEMPTS"

          # Determine backoff time based on attempt
          if [ $ATTEMPT -le 10 ]; then
            backoff=5
          elif [ $ATTEMPT -le 20 ]; then
            backoff=10
          else
            backoff=15
          fi

          # Check VM state first
          VM_STATE=$(virsh domstate {{ vm_config.name }} 2>/dev/null || echo "unknown")
          echo "   🖥️  VM State: $VM_STATE"

          if [ "$VM_STATE" != "running" ]; then
            echo "   💤 VM is not in running state yet"
          else
            # Test SSH connection through bastion
            echo "   🔗 Testing SSH through bastion host..."
            if timeout 15 ssh $BASTION_SSH_OPTS $TARGET_USER@$HOST 'echo "SSH_READY"' 2>/dev/null | grep -q "SSH_READY"; then
              echo "   🎉 SSH connection successful through bastion!"

              # Perform comprehensive readiness checks
              echo "   🔍 Running comprehensive service readiness checks..."
              ssh $BASTION_SSH_OPTS $TARGET_USER@$HOST '
                echo "   📋 System readiness status:"
                echo "     - Hostname: $(hostname)"
                echo "     - Uptime: $(uptime | cut -d"," -f1)"
                echo "     - Load: $(uptime | grep -o "load.*")"
                echo "     - Memory: $(free -m | grep "Mem:" | awk "{print \$2\" MB total, \"\$3\" MB used\"}")"
                echo "     - Disk space: $(df -h / | tail -1 | awk "{print \$4\" available\"}")"

                # Check critical services
                echo "   🔧 Service status:"
                if systemctl is-active ssh >/dev/null 2>&1; then
                  echo "     - SSH service: ✅ Active"
                else
                  echo "     - SSH service: ❌ Inactive"
                fi

                if systemctl is-active systemd-resolved >/dev/null 2>&1; then
                  echo "     - DNS resolver: ✅ Active"
                else
                  echo "     - DNS resolver: ❌ Inactive"
                fi

                # Check cloud-init completion
                if cloud-init status --wait --long >/dev/null 2>&1; then
                  echo "     - Cloud-init: ✅ Complete"
                else
                  echo "     - Cloud-init: ⏳ In progress or failed"
                fi

                # Network connectivity test
                if ping -c 1 -W 3 8.8.8.8 >/dev/null 2>&1; then
                  echo "     - Internet connectivity: ✅ Available"
                else
                  echo "     - Internet connectivity: ❌ Unavailable"
                fi

                # Package manager readiness
                if apt list --installed >/dev/null 2>&1; then
                  echo "     - Package manager: ✅ Ready"
                else
                  echo "     - Package manager: ❌ Not ready"
                fi
              ' 2>/dev/null

              echo ""
              echo "✅ VM is fully ready for deployment!"
              exit 0
            else
              echo "   ⏳ SSH not ready through bastion (host may still be booting)"
            fi

            # Additional VM diagnostics for running VMs
            CPU_TIME=$(virsh domstats {{ vm_config.name }} --cpu-total 2>/dev/null | grep "cpu.time" | cut -d'=' -f2 || echo "0")
            if [ "$CPU_TIME" -gt 0 ] 2>/dev/null; then
              echo "   📊 CPU Activity: Detected (boot in progress)"
            else
              echo "   📊 CPU Activity: Low (may be idle or stuck)"
            fi

            # Check if VM responds to ping from homelab server
            if ping -c 1 -W 2 $HOST >/dev/null 2>&1; then
              echo "   🌐 Network: VM is reachable from homelab server"
            else
              echo "   🌐 Network: VM not responding to ping"
            fi
          fi

          echo "   ⏱️  Waiting $backoff seconds before next attempt..."
          sleep $backoff
        done

        echo ""
        echo "❌ SSH readiness timeout after approximately $((MAX_ATTEMPTS * 10)) seconds"
        echo ""
        echo "🔧 Final diagnostics:"
        echo "VM State: $(virsh domstate {{ vm_config.name }})"
        echo "Network interfaces: $(virsh domiflist {{ vm_config.name }} | tail -n +3)"
        echo "Network addresses: $(virsh domifaddr {{ vm_config.name }} | tail -n +3)"
        echo ""
        echo "Attempting final SSH connection with verbose output..."
        ssh $BASTION_SSH_OPTS -v $TARGET_USER@$HOST 'echo "Final test"' 2>&1 | head -20
        exit 1
      register: ssh_ready_check
      failed_when: ssh_ready_check.rc != 0
      delegate_to: "{{ inventory_hostname }}"

    - name: Verify SSH functionality with comprehensive system info via bastion
      become: no
      shell: |
        SSH_KEY="{{ lookup('env', 'HOMELAB_SSH_KEY_PATH') | default('~/.ssh/id_ed25519') }}"
        SSH_OPTS="-i $SSH_KEY -o ConnectTimeout=10 -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        BASTION_SSH_OPTS="$SSH_OPTS -o ProxyJump={{ ansible_user }}@{{ ansible_host }}"

        echo "🔍 Final verification: Comprehensive system information check"
        ssh $BASTION_SSH_OPTS kang@{{ vm_ip.stdout }} '
          echo "📋 === VM System Information ==="
          echo "Hostname: $(hostname)"
          echo "Uptime: $(uptime)"
          echo "Load average: $(cat /proc/loadavg)"
          echo "Memory: $(free -h | head -2)"
          echo "Disk usage: $(df -h / | tail -1)"
          echo "Network interfaces: $(ip -br addr show | head -3)"
          echo "Default route: $(ip route | grep default | head -1)"
          echo "DNS servers: $(cat /etc/resolv.conf | grep nameserver | head -2)"
          echo "Cloud-init status: $(cloud-init status --wait --long 2>/dev/null || echo "Status unknown")"
          echo "SSH daemon status: $(systemctl is-active ssh)"
          echo "🎯 SSH connection through bastion verified successfully!"
        '
      register: vm_info
      delegate_to: "{{ inventory_hostname }}"

    - name: Display VM system information
      debug:
        var: vm_info.stdout_lines

  rescue:
    - name: SSH readiness failed - collecting diagnostics
      block:
        - name: Collect VM diagnostics
          shell: |
            echo "=== VM Diagnostics ==="
            echo "VM State: $(virsh domstate {{ vm_config.name }})"
            echo "VM Info: $(virsh dominfo {{ vm_config.name }})"
            echo "Network interfaces: $(virsh domiflist {{ vm_config.name }})"
            echo "Network addresses: $(virsh domifaddr {{ vm_config.name }})"
            echo "Console log (last 50 lines):"
            virsh console {{ vm_config.name }} --force 2>/dev/null | tail -50 || echo "Console unavailable"
          register: vm_diagnostics
          failed_when: false

        - name: Display diagnostics
          debug:
            var: vm_diagnostics.stdout_lines

        - name: Suggest manual intervention
          debug:
            msg:
              - "🚨 SSH readiness check failed. Manual steps to investigate:"
              - "1. Check VM console: virsh console {{ vm_config.name }}"
              - "2. Check VM status: virsh domstate {{ vm_config.name }}"
              - "3. Check network: ping {{ vm_ip.stdout }}"
              - "4. Try manual SSH: ssh kang@{{ vm_ip.stdout }}"
              - "5. Check cloud-init logs inside VM: /var/log/cloud-init*.log"

        - fail:
            msg: "VM SSH readiness check failed after comprehensive monitoring"
