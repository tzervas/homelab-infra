#!/bin/bash
# Privilege escalation wrapper script for {{ deployment_user }}
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
DEPLOYMENT_USER="{{ deployment_user }}"
LOG_FILE="${HOME}/.local/log/homelab-sudo.log"
AUDIT_LOG="/var/log/audit/homelab-deployment.log"

# Ensure log directory exists
mkdir -p "$(dirname "$LOG_FILE")"

# Function to log privilege escalation attempts
log_sudo_attempt() {
    local command="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Log to user log file
    echo "[$timestamp] SUDO: $command" >> "$LOG_FILE"
    
    # Log to system audit log (if accessible)
    if [[ -w "$(dirname "$AUDIT_LOG")" ]] 2>/dev/null; then
        echo "[$timestamp] USER=$DEPLOYMENT_USER SUDO: $command" | sudo tee -a "$AUDIT_LOG" >/dev/null
    fi
}

# Function to preserve environment during sudo
preserve_environment() {
    # List of environment variables to preserve
    local preserve_vars=(
        "PATH"
        "HOME"
        "KUBECONFIG"
        "HOMELAB_USER"
        "HOMELAB_HOME"
        "HOMELAB_DEPLOYMENT_MODE"
    )
    
    for var in "${preserve_vars[@]}"; do
        if [[ -n "${!var:-}" ]]; then
            echo "--preserve-env=$var"
        fi
    done
}

# Function to check if command is allowed
is_command_allowed() {
    local command="$1"
    
    # List of allowed command patterns
    local allowed_patterns=(
{% for command in deployment_sudo_commands %}
        "{{ command | regex_replace('\\\\', '') }}"
{% endfor %}
    )
    
    for pattern in "${allowed_patterns[@]}"; do
        if [[ "$command" =~ $pattern ]]; then
            return 0
        fi
    done
    
    return 1
}

# Main execution
main() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 <command> [arguments...]"
        echo "This wrapper provides controlled privilege escalation for homelab deployment."
        echo ""
        echo "Allowed commands:"
{% for command in deployment_sudo_commands %}
        echo "  {{ command | regex_replace('\\\\', '') }}"
{% endfor %}
        exit 1
    fi
    
    local full_command="$*"
    
    # Check if command is allowed
    if ! is_command_allowed "$full_command"; then
        echo "ERROR: Command not allowed: $full_command" >&2
        echo "Use '$0' without arguments to see allowed commands." >&2
        exit 1
    fi
    
    # Log the attempt
    log_sudo_attempt "$full_command"
    
    # Prepare environment preservation
    local env_args=()
    while IFS= read -r arg; do
        env_args+=("$arg")
    done < <(preserve_environment)
    
    # Execute with sudo
    echo "Executing with privilege escalation: $full_command"
    exec sudo "${env_args[@]}" "$@"
}

# Execute main function with all arguments
main "$@"