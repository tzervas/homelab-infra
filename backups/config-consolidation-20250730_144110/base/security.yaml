# Security Configuration
# Centralized security policies, contexts, and standards

security:
  # Pod Security Standards
  pod_security:
    # Default security context for all pods
    default_context:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"
      seccompProfile:
        type: "RuntimeDefault"
      capabilities:
        drop:
          - "ALL"
        add: []

    # Security context profiles by security level
    profiles:
      restricted:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        seccompProfile:
          type: "RuntimeDefault"
        capabilities:
          drop: ["ALL"]

      baseline:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        allowPrivilegeEscalation: false
        seccompProfile:
          type: "RuntimeDefault"
        capabilities:
          drop: ["ALL"]

      privileged:
        # Only for system components that require elevated access
        runAsUser: 0
        allowPrivilegeEscalation: true
        privileged: false
        hostNetwork: false
        hostPID: false
        hostIPC: false

  # Pod Security Standards Enforcement
  pod_security_standards:
    # Namespace-level enforcement
    namespaces:
      # Restricted namespaces (highest security)
      restricted:
        - "default"
        - "gitlab"
        - "keycloak"
        - "monitoring"
        - "ai-ml"

      # Baseline namespaces (moderate security)
      baseline:
        - "cert-manager"
        - "ingress-nginx"

      # Privileged namespaces (system components only)
      privileged:
        - "kube-system"
        - "metallb-system"
        - "longhorn-system"

    # Global enforcement mode
    enforce: true
    audit: true
    warn: true

  # RBAC Configuration
  rbac:
    # Default service account settings
    service_accounts:
      # Disable automounting of service account tokens by default
      automount_service_account_token: false

      # Default service account for applications
      default:
        name: "default"
        automount_token: false

    # Common RBAC templates
    roles:
      # Read-only access to resources
      reader:
        rules:
          - apiGroups: [""]
            resources: ["pods", "services", "configmaps"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["deployments", "replicasets"]
            verbs: ["get", "list", "watch"]

      # Application operator role
      operator:
        rules:
          - apiGroups: [""]
            resources: ["pods", "services", "configmaps", "secrets"]
            verbs: ["get", "list", "watch", "create", "update", "patch"]
          - apiGroups: ["apps"]
            resources: ["deployments", "replicasets"]
            verbs: ["get", "list", "watch", "create", "update", "patch"]

      # Monitoring role
      monitoring:
        rules:
          - apiGroups: [""]
            resources: ["nodes", "pods", "services", "endpoints"]
            verbs: ["get", "list", "watch"]
          - apiGroups: ["apps"]
            resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
            verbs: ["get", "list", "watch"]

  # Network Security
  network_policies:
    # Default network policy behavior
    default_deny_all: false

    # Common network policy templates
    templates:
      # Deny all traffic (starting point)
      deny_all:
        podSelector: {}
        policyTypes: ["Ingress", "Egress"]

      # Allow DNS resolution
      allow_dns:
        podSelector: {}
        policyTypes: ["Egress"]
        egress:
          - to: []
            ports:
              - protocol: UDP
                port: 53
              - protocol: TCP
                port: 53

      # Allow ingress from ingress controller
      allow_ingress:
        podSelector:
          matchLabels:
            app.kubernetes.io/component: "web"
        policyTypes: ["Ingress"]
        ingress:
          - from:
              - namespaceSelector:
                  matchLabels:
                    name: "ingress-nginx"
            ports:
              - protocol: TCP
                port: 80
              - protocol: TCP
                port: 443

  # TLS/Certificate Security
  tls:
    # Minimum TLS version
    min_version: "1.2"

    # Cipher suites (modern compatibility)
    cipher_suites:
      - "TLS_AES_256_GCM_SHA384"
      - "TLS_CHACHA20_POLY1305_SHA256"
      - "TLS_AES_128_GCM_SHA256"
      - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
      - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
      - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

    # Certificate requirements
    certificates:
      key_size: 2048
      algorithm: "RSA"
      duration: "2160h" # 90 days
      renew_before: "360h" # 15 days

    # HSTS settings
    hsts:
      max_age: 31536000 # 1 year
      include_subdomains: true
      preload: true

  # Secrets Management
  secrets:
    # Encryption at rest
    encryption:
      enabled: true
      provider: "aescbc" # or "secretbox", "aesgcm"

    # Secret rotation
    rotation:
      enabled: true
      frequency: "30d"

    # Sealed secrets configuration
    sealed_secrets:
      enabled: true
      scope: "cluster-wide" # or "namespace-wide", "strict"

  # Image Security
  images:
    # Image pull policies
    pull_policy: "IfNotPresent" # or "Always", "Never"

    # Image scanning
    scanning:
      enabled: true
      severity_threshold: "HIGH"

    # Allowed registries
    allowed_registries:
      - "docker.io"
      - "ghcr.io"
      - "quay.io"
      - "registry.k8s.io"
      - "{{ .Values.gitlab.registry.url }}"

    # Image signature verification
    signature_verification:
      enabled: false
      required_signatures: 1

  # Resource Quotas and Limits
  resource_quotas:
    # Default namespace quotas
    namespace_defaults:
      requests.cpu: "4"
      requests.memory: "8Gi"
      limits.cpu: "8"
      limits.memory: "16Gi"
      persistentvolumeclaims: "10"
      pods: "20"
      services: "10"

    # Resource limit ranges
    limit_ranges:
      container_defaults:
        default_request:
          cpu: "100m"
          memory: "128Mi"
        default_limit:
          cpu: "500m"
          memory: "512Mi"
        max:
          cpu: "2"
          memory: "4Gi"
        min:
          cpu: "50m"
          memory: "64Mi"

  # Admission Controllers
  admission_controllers:
    # Pod Security Policy (deprecated, use Pod Security Standards)
    pod_security_policy:
      enabled: false

    # Open Policy Agent Gatekeeper
    gatekeeper:
      enabled: false
      constraints:
        - name: "required-labels"
          template: "k8srequiredlabels"
          parameters:
            labels: ["app.kubernetes.io/name", "app.kubernetes.io/version"]

        - name: "allowed-registries"
          template: "k8sallowedrepos"
          parameters:
            repos: "{{ .Values.security.images.allowed_registries }}"

  # Monitoring and Auditing
  monitoring:
    # Security event monitoring
    events:
      enabled: true
      retention: "30d"

    # Audit logging
    audit:
      enabled: true
      level: "RequestResponse"
      namespaces: ["default", "kube-system"]

    # Falco runtime security
    falco:
      enabled: false
      rules_file: "/etc/falco/falco_rules.yaml"
