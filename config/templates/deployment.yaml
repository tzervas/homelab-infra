# Standard Deployment Template
# Reusable deployment template with consistent patterns

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.name }}"
  namespace: "{{ .Values.namespace }}"
  labels:
    app.kubernetes.io/name: "{{ .Values.name }}"
    app.kubernetes.io/instance: "{{ .Values.instance | default .Values.name }}"
    app.kubernetes.io/version: "{{ .Values.version | default \"latest\" }}"
    app.kubernetes.io/component: "{{ .Values.component | default \"application\" }}"
    app.kubernetes.io/part-of: "{{ .Values.global.labels.app.kubernetes.io/part-of }}"
    app.kubernetes.io/managed-by: "{{ .Values.global.labels.app.kubernetes.io/managed-by }}"
    homelab.local/environment: "{{ .Values.environment }}"
    homelab.local/tier: "{{ .Values.tier | default \"application\" }}"
  annotations:
    deployment.kubernetes.io/revision: "{{ .Values.revision | default \"1\" }}"
    homelab.local/managed-by: "centralized-config"
    homelab.local/last-updated: "{{ now | date \"2006-01-02T15:04:05Z\" }}"
spec:
  replicas: "{{ .Values.replicas | default 1 }}"
  strategy:
    type: "{{ .Values.strategy.type | default \"RollingUpdate\" }}"
    {{- if eq (.Values.strategy.type | default \"RollingUpdate\") "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: "{{ .Values.strategy.maxUnavailable | default \"25%\" }}"
      maxSurge: "{{ .Values.strategy.maxSurge | default \"25%\" }}"
    {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Values.name }}"
      app.kubernetes.io/instance: "{{ .Values.instance | default .Values.name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Values.name }}"
        app.kubernetes.io/instance: "{{ .Values.instance | default .Values.name }}"
        app.kubernetes.io/version: "{{ .Values.version | default \"latest\" }}"
        app.kubernetes.io/component: "{{ .Values.component | default \"application\" }}"
        app.kubernetes.io/part-of: "{{ .Values.global.labels.app.kubernetes.io/part-of }}"
        homelab.local/environment: "{{ .Values.environment }}"
        homelab.local/tier: "{{ .Values.tier | default \"application\" }}"
      annotations:
        # Prometheus scraping annotations
        prometheus.io/scrape: "{{ .Values.monitoring.enabled | default \"false\" }}"
        {{- if .Values.monitoring.enabled }}
        prometheus.io/port: "{{ .Values.monitoring.port | default \"8080\" }}"
        prometheus.io/path: "{{ .Values.monitoring.path | default \"/metrics\" }}"
        {{- end }}
        # Configuration checksum for rolling updates
        checksum/config: "{{ .Values.configChecksum | default \"\" }}"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: "{{ .Values.securityContext.runAsNonRoot | default true }}"
        runAsUser: "{{ .Values.securityContext.runAsUser | default 1000 }}"
        runAsGroup: "{{ .Values.securityContext.runAsGroup | default 1000 }}"
        fsGroup: "{{ .Values.securityContext.fsGroup | default 1000 }}"
        fsGroupChangePolicy: "{{ .Values.securityContext.fsGroupChangePolicy | default \"OnRootMismatch\" }}"
        seccompProfile:
          type: "{{ .Values.securityContext.seccompProfile.type | default \"RuntimeDefault\" }}"

      # Service account
      serviceAccountName: "{{ .Values.serviceAccount.name | default \"default\" }}"
      automountServiceAccountToken: "{{ .Values.serviceAccount.automountToken | default false }}"

      # Image pull secrets
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- end }}

      # Pod affinity and anti-affinity
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}

      # Node selector
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}

      # Tolerations
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}

      # Priority class
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}

      # DNS policy and config
      dnsPolicy: "{{ .Values.dnsPolicy | default \"ClusterFirst\" }}"
      {{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}

      # Init containers
      {{- if .Values.initContainers }}
      initContainers:
        {{- range .Values.initContainers }}
        - name: "{{ .name }}"
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: "{{ .image.pullPolicy | default $.Values.global.registry.pullPolicy }}"
          {{- if .command }}
          command: {{ .command | toYaml | nindent 12 }}
          {{- end }}
          {{- if .args }}
          args: {{ .args | toYaml | nindent 12 }}
          {{- end }}
          {{- if .env }}
          env: {{ .env | toYaml | nindent 12 }}
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts: {{ .volumeMounts | toYaml | nindent 12 }}
          {{- end }}
          {{- if .resources }}
          resources: {{ .resources | toYaml | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: "{{ .securityContext.readOnlyRootFilesystem | default true }}"
            capabilities:
              drop: ["ALL"]
        {{- end }}
      {{- end }}

      # Main containers
      containers:
        - name: "{{ .Values.container.name | default .Values.name }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy | default .Values.global.registry.pullPolicy }}"

          # Container security context
          securityContext:
            allowPrivilegeEscalation: "{{ .Values.container.securityContext.allowPrivilegeEscalation | default false }}"
            readOnlyRootFilesystem: "{{ .Values.container.securityContext.readOnlyRootFilesystem | default true }}"
            capabilities:
              drop: ["ALL"]
              {{- if .Values.container.securityContext.capabilities.add }}
              add: {{ .Values.container.securityContext.capabilities.add | toYaml | nindent 16 }}
              {{- end }}

          # Container ports
          {{- if .Values.ports }}
          ports:
            {{- range .Values.ports }}
            - name: "{{ .name }}"
              containerPort: {{ .containerPort }}
              protocol: "{{ .protocol | default \"TCP\" }}"
            {{- end }}
          {{- end }}

          # Environment variables
          {{- if .Values.env }}
          env:
            {{- range .Values.env }}
            - name: "{{ .name }}"
              {{- if .value }}
              value: "{{ .value }}"
              {{- else if .valueFrom }}
              valueFrom: {{ .valueFrom | toYaml | nindent 16 }}
              {{- end }}
            {{- end }}
          {{- end }}

          # Environment from ConfigMaps/Secrets
          {{- if .Values.envFrom }}
          envFrom:
            {{- range .Values.envFrom }}
            {{- if .configMapRef }}
            - configMapRef:
                name: "{{ .configMapRef.name }}"
                {{- if .configMapRef.optional }}
                optional: {{ .configMapRef.optional }}
                {{- end }}
            {{- end }}
            {{- if .secretRef }}
            - secretRef:
                name: "{{ .secretRef.name }}"
                {{- if .secretRef.optional }}
                optional: {{ .secretRef.optional }}
                {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}

          # Volume mounts
          {{- if .Values.volumeMounts }}
          volumeMounts:
            {{- range .Values.volumeMounts }}
            - name: "{{ .name }}"
              mountPath: "{{ .mountPath }}"
              {{- if .subPath }}
              subPath: "{{ .subPath }}"
              {{- end }}
              {{- if .readOnly }}
              readOnly: {{ .readOnly }}
              {{- end }}
            {{- end }}
          {{- end }}

          # Resource limits and requests
          {{- if .Values.resources }}
          resources: {{ .Values.resources | toYaml | nindent 12 }}
          {{- end }}

          # Liveness probe
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- if .Values.livenessProbe.httpGet }}
            httpGet:
              path: "{{ .Values.livenessProbe.httpGet.path }}"
              port: {{ .Values.livenessProbe.httpGet.port }}
              {{- if .Values.livenessProbe.httpGet.scheme }}
              scheme: "{{ .Values.livenessProbe.httpGet.scheme }}"
              {{- end }}
              {{- if .Values.livenessProbe.httpGet.httpHeaders }}
              httpHeaders: {{ .Values.livenessProbe.httpGet.httpHeaders | toYaml | nindent 16 }}
              {{- end }}
            {{- else if .Values.livenessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.livenessProbe.tcpSocket.port }}
            {{- else if .Values.livenessProbe.exec }}
            exec:
              command: {{ .Values.livenessProbe.exec.command | toYaml | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 30 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default 1 }}
          {{- end }}

          # Readiness probe
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- if .Values.readinessProbe.httpGet }}
            httpGet:
              path: "{{ .Values.readinessProbe.httpGet.path }}"
              port: {{ .Values.readinessProbe.httpGet.port }}
              {{- if .Values.readinessProbe.httpGet.scheme }}
              scheme: "{{ .Values.readinessProbe.httpGet.scheme }}"
              {{- end }}
              {{- if .Values.readinessProbe.httpGet.httpHeaders }}
              httpHeaders: {{ .Values.readinessProbe.httpGet.httpHeaders | toYaml | nindent 16 }}
              {{- end }}
            {{- else if .Values.readinessProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.readinessProbe.tcpSocket.port }}
            {{- else if .Values.readinessProbe.exec }}
            exec:
              command: {{ .Values.readinessProbe.exec.command | toYaml | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}
          {{- end }}

          # Startup probe
          {{- if .Values.startupProbe }}
          startupProbe:
            {{- if .Values.startupProbe.httpGet }}
            httpGet:
              path: "{{ .Values.startupProbe.httpGet.path }}"
              port: {{ .Values.startupProbe.httpGet.port }}
              {{- if .Values.startupProbe.httpGet.scheme }}
              scheme: "{{ .Values.startupProbe.httpGet.scheme }}"
              {{- end }}
            {{- else if .Values.startupProbe.tcpSocket }}
            tcpSocket:
              port: {{ .Values.startupProbe.tcpSocket.port }}
            {{- else if .Values.startupProbe.exec }}
            exec:
              command: {{ .Values.startupProbe.exec.command | toYaml | nindent 16 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold | default 30 }}
            successThreshold: {{ .Values.startupProbe.successThreshold | default 1 }}
          {{- end }}

        # Sidecar containers
        {{- if .Values.sidecars }}
        {{- range .Values.sidecars }}
        - name: "{{ .name }}"
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: "{{ .image.pullPolicy | default $.Values.global.registry.pullPolicy }}"
          {{- if .ports }}
          ports: {{ .ports | toYaml | nindent 12 }}
          {{- end }}
          {{- if .env }}
          env: {{ .env | toYaml | nindent 12 }}
          {{- end }}
          {{- if .volumeMounts }}
          volumeMounts: {{ .volumeMounts | toYaml | nindent 12 }}
          {{- end }}
          {{- if .resources }}
          resources: {{ .resources | toYaml | nindent 12 }}
          {{- else }}
          resources: {{ $.Values.resources.profiles.micro | toYaml | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
        {{- end }}
        {{- end }}

      # Volumes
      {{- if .Values.volumes }}
      volumes:
        {{- range .Values.volumes }}
        - name: "{{ .name }}"
          {{- if .configMap }}
          configMap:
            name: "{{ .configMap.name }}"
            {{- if .configMap.defaultMode }}
            defaultMode: {{ .configMap.defaultMode }}
            {{- end }}
            {{- if .configMap.items }}
            items: {{ .configMap.items | toYaml | nindent 14 }}
            {{- end }}
          {{- else if .secret }}
          secret:
            secretName: "{{ .secret.secretName }}"
            {{- if .secret.defaultMode }}
            defaultMode: {{ .secret.defaultMode }}
            {{- end }}
            {{- if .secret.items }}
            items: {{ .secret.items | toYaml | nindent 14 }}
            {{- end }}
          {{- else if .persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: "{{ .persistentVolumeClaim.claimName }}"
          {{- else if .emptyDir }}
          emptyDir:
            {{- if .emptyDir.sizeLimit }}
            sizeLimit: "{{ .emptyDir.sizeLimit }}"
            {{- end }}
            {{- if .emptyDir.medium }}
            medium: "{{ .emptyDir.medium }}"
            {{- end }}
          {{- else if .hostPath }}
          hostPath:
            path: "{{ .hostPath.path }}"
            type: "{{ .hostPath.type | default \"DirectoryOrCreate\" }}"
          {{- end }}
        {{- end }}
      {{- end }}

      # Termination grace period
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}

      # Restart policy
      restartPolicy: "{{ .Values.restartPolicy | default \"Always\" }}"
