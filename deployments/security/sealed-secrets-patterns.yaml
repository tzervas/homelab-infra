# Sealed-Secrets Patterns for Secure Sensitive Data Management
# This file defines patterns and templates for using sealed-secrets across the homelab

---
# Sealed Secrets Controller Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller-config
    app.kubernetes.io/managed-by: homelab-security
data:
  controller.yaml: |
    # Sealed Secrets Controller Configuration
    controller:
      # Encryption settings
      encryption:
        algorithm: "rsa-oaep"
        keySize: 4096

      # Key management
      keyManagement:
        rotationPeriod: "30d"
        keyLabels:
          - "sealedsecrets.bitnami.com/sealed-secrets-key"
        secretName: "sealed-secrets-key"

      # Security settings
      security:
        validateOwnerReferences: true
        requireNamespaceLabel: true
        allowEmptyData: false

      # Monitoring
      monitoring:
        enabled: true
        port: 8080
        path: "/metrics"

      # Logging
      logging:
        level: "info"
        format: "json"

---
# Enhanced Sealed Secrets Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller-enhanced
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
    app.kubernetes.io/managed-by: homelab-security
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: sealed-secrets-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: sealed-secrets-controller
          image: quay.io/bitnami/sealed-secrets-controller:v0.18.0
          imagePullPolicy: IfNotPresent
          command:
            - controller
          args:
            - --update-status
            - --metrics-addr=:8080
            - --key-renew-period=30d
            - --key-cutoff-time=P30D
            - --private-key-annotations=sealedsecrets.bitnami.com/managed-by=homelab-security
          env:
            - name: SEALED_SECRETS_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /etc/sealed-secrets
              readOnly: true
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: sealed-secrets-config

---
# GitLab sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: gitlab-secrets-template
  namespace: gitlab
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: gitlab-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    GITLAB_ROOT_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN: AgBi4F8OJSWK+PiTySYZZA9rO...
    GITLAB_SECRETS_DB_KEY_BASE: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_SECRETS_SECRET_KEY_BASE: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_SECRETS_OTP_KEY_BASE: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_INITIAL_ROOT_EMAIL: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_POSTGRES_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    GITLAB_REDIS_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: gitlab-secrets
      namespace: gitlab
      labels:
        app.kubernetes.io/name: gitlab
        app.kubernetes.io/component: secrets
    type: Opaque

---
# Keycloak sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: keycloak-secrets-template
  namespace: keycloak
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: keycloak-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    KEYCLOAK_ADMIN_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    KEYCLOAK_MANAGEMENT_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    KEYCLOAK_DATABASE_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    KEYCLOAK_TRUSTSTORE_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    KEYCLOAK_KEYSTORE_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: keycloak-secrets
      namespace: keycloak
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/component: secrets
    type: Opaque

---
# Database credentials sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: database-credentials-template
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: database-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/cluster-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    POSTGRES_USERNAME: AgBy3i4OJSWK+PiTySYZZA9rO...
    POSTGRES_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    POSTGRES_DATABASE: AgBy3i4OJSWK+PiTySYZZA9rO...
    POSTGRES_HOST: AgBy3i4OJSWK+PiTySYZZA9rO...
    POSTGRES_PORT: AgBy3i4OJSWK+PiTySYZZA9rO...
    CONNECTION_STRING: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: database-credentials
      labels:
        app.kubernetes.io/name: database
        app.kubernetes.io/component: credentials
    type: Opaque

---
# TLS certificate sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: tls-certificate-template
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: tls-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    tls.crt: AgBy3i4OJSWK+PiTySYZZA9rO...
    tls.key: AgBy3i4OJSWK+PiTySYZZA9rO...
    ca.crt: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: tls-certificate
      labels:
        app.kubernetes.io/name: tls
        app.kubernetes.io/component: certificate
    type: kubernetes.io/tls

---
# SSH keys sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: ssh-keys-template
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: ssh-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/cluster-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    ssh-privatekey: AgBy3i4OJSWK+PiTySYZZA9rO...
    ssh-publickey: AgBy3i4OJSWK+PiTySYZZA9rO...
    known_hosts: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: ssh-keys
      labels:
        app.kubernetes.io/name: ssh
        app.kubernetes.io/component: keys
    type: Opaque

---
# Docker registry credentials sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: docker-registry-template
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: registry-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/cluster-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    .dockerconfigjson: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: docker-registry-credentials
      labels:
        app.kubernetes.io/name: docker
        app.kubernetes.io/component: registry
    type: kubernetes.io/dockerconfigjson

---
# API keys sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: api-keys-template
  namespace: default
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: api-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    GITHUB_API_TOKEN: AgBy3i4OJSWK+PiTySYZZA9rO...
    SLACK_API_TOKEN: AgBy3i4OJSWK+PiTySYZZA9rO...
    DOCKER_HUB_TOKEN: AgBy3i4OJSWK+PiTySYZZA9rO...
    PROMETHEUS_API_KEY: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: api-keys
      labels:
        app.kubernetes.io/name: api
        app.kubernetes.io/component: keys
    type: Opaque

---
# Monitoring secrets sealed secret template
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: monitoring-secrets-template
  namespace: monitoring
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: monitoring-secrets
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    sealedsecrets.bitnami.com/template: "true"
    sealedsecrets.bitnami.com/namespace-wide: "true"
spec:
  encryptedData:
    # These are example encrypted values - replace with actual sealed values
    GRAFANA_ADMIN_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    PROMETHEUS_ADMIN_PASSWORD: AgBy3i4OJSWK+PiTySYZZA9rO...
    ALERTMANAGER_WEBHOOK_URL: AgBy3i4OJSWK+PiTySYZZA9rO...
    SLACK_WEBHOOK_URL: AgBy3i4OJSWK+PiTySYZZA9rO...
  template:
    metadata:
      name: monitoring-secrets
      namespace: monitoring
      labels:
        app.kubernetes.io/name: monitoring
        app.kubernetes.io/component: secrets
    type: Opaque

---
# Sealed secrets key backup configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-backup-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: backup-config
    app.kubernetes.io/managed-by: homelab-security
data:
  backup.yaml: |
    # Sealed Secrets Key Backup Configuration
    backup:
      # Backup schedule
      schedule:
        daily: "0 3 * * *"    # Daily backup at 3 AM
        weekly: "0 4 * * 0"   # Weekly backup on Sunday at 4 AM
        monthly: "0 5 1 * *"  # Monthly backup on 1st at 5 AM

      # Retention policy
      retention:
        daily: 7     # Keep 7 daily backups
        weekly: 4    # Keep 4 weekly backups
        monthly: 12  # Keep 12 monthly backups

      # Storage configuration
      storage:
        type: "longhorn"
        encryption: true
        compression: true

      # Verification
      verification:
        enabled: true
        test_decryption: true
        checksum_validation: true

---
# Sealed secrets backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sealed-secrets-backup
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: backup-job
    app.kubernetes.io/managed-by: homelab-security
spec:
  schedule: "0 3 * * *" # Daily at 3 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: sealed-secrets
            app.kubernetes.io/component: backup
        spec:
          serviceAccountName: sealed-secrets-backup-sa
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
            - name: backup
              image: quay.io/homelab/sealed-secrets-backup:v1.0.0
              imagePillPolicy: IfNotPresent
              env:
                - name: BACKUP_CONFIG
                  valueFrom:
                    configMapKeyRef:
                      name: sealed-secrets-backup-config
                      key: backup.yaml
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
                - name: config
                  mountPath: /etc/backup
                  readOnly: true
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL
              resources:
                requests:
                  memory: "64Mi"
                  cpu: "50m"
                limits:
                  memory: "128Mi"
                  cpu: "100m"
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: sealed-secrets-backup-pvc
            - name: config
              configMap:
                name: sealed-secrets-backup-config

---
# Sealed secrets usage guidelines
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-usage-guide
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: usage-guide
    app.kubernetes.io/managed-by: homelab-security
data:
  README.md: |
    # Sealed Secrets Usage Guide

    ## Overview
    This guide provides instructions for using sealed secrets in the homelab infrastructure.

    ## Creating Sealed Secrets

    ### 1. Install kubeseal CLI
    ```bash
    # Download and install kubeseal
    wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.18.0/kubeseal-0.18.0-linux-amd64.tar.gz
    tar -xvzf kubeseal-0.18.0-linux-amd64.tar.gz
    sudo install -m 755 kubeseal /usr/local/bin/kubeseal
    ```

    ### 2. Create a regular Kubernetes secret
    ```bash
    # Create secret from literals
    kubectl create secret generic mysecret \
      --from-literal=username=myuser \
      --from-literal=password=mypassword \
      --dry-run=client -o yaml > mysecret.yaml
    ```

    ### 3. Seal the secret
    ```bash
    # Seal the secret (namespace-wide scope)
    kubeseal -o yaml < mysecret.yaml > mysealedsecret.yaml

    # Seal with cluster-wide scope
    kubeseal --scope cluster-wide -o yaml < mysecret.yaml > mysealedsecret.yaml

    # Seal with strict scope (default)
    kubeseal --scope strict -o yaml < mysecret.yaml > mysealedsecret.yaml
    ```

    ### 4. Apply the sealed secret
    ```bash
    kubectl apply -f mysealedsecret.yaml
    ```

    ## Secret Scopes

    ### Strict (default)
    - Secret can only be unsealed by the same name and namespace
    - Most secure option
    - Use for environment-specific secrets

    ### Namespace-wide
    - Secret can be unsealed by any name within the same namespace
    - Good for shared secrets within a namespace
    - Use annotation: `sealedsecrets.bitnami.com/namespace-wide: "true"`

    ### Cluster-wide
    - Secret can be unsealed by any name in any namespace
    - Least secure but most flexible
    - Use annotation: `sealedsecrets.bitnami.com/cluster-wide: "true"`

    ## Best Practices

    1. **Use appropriate scopes**: Default to strict, only use wider scopes when necessary
    2. **Version control**: Store sealed secrets in git, never store plain secrets
    3. **Key rotation**: Regularly rotate sealed secrets controller keys
    4. **Backup keys**: Always backup the controller's private keys
    5. **Monitor expiration**: Set up alerts for key expiration
    6. **Test decryption**: Regularly test that sealed secrets can be decrypted

    ## Troubleshooting

    ### Common Issues
    1. **Decryption failed**: Check controller logs and key validity
    2. **Wrong scope**: Verify the sealed secret scope matches usage
    3. **Key expired**: Check if controller keys need rotation
    4. **Namespace issues**: Ensure correct namespace in sealed secret

    ### Debugging Commands
    ```bash
    # Check controller status
    kubectl get pods -n kube-system -l app.kubernetes.io/name=sealed-secrets

    # View controller logs
    kubectl logs -n kube-system -l app.kubernetes.io/name=sealed-secrets

    # Check sealed secret status
    kubectl get sealedsecrets -A

    # View sealed secret details
    kubectl describe sealedsecret <name> -n <namespace>
    ```

  examples.yaml: |
    # Example sealed secret configurations

    # Basic database secret
    apiVersion: bitnami.com/v1alpha1
    kind: SealedSecret
    metadata:
      name: postgres-credentials
      namespace: production
    spec:
      encryptedData:
        username: AgBy3i4OJSWK+PiTySYZZA9rO...
        password: AgBy3i4OJSWK+PiTySYZZA9rO...
        host: AgBy3i4OJSWK+PiTySYZZA9rO...
      template:
        metadata:
          name: postgres-credentials
        type: Opaque

    # TLS certificate
    apiVersion: bitnami.com/v1alpha1
    kind: SealedSecret
    metadata:
      name: app-tls-cert
      namespace: production
    spec:
      encryptedData:
        tls.crt: AgBy3i4OJSWK+PiTySYZZA9rO...
        tls.key: AgBy3i4OJSWK+PiTySYZZA9rO...
      template:
        metadata:
          name: app-tls-cert
        type: kubernetes.io/tls

    # Docker registry credentials
    apiVersion: bitnami.com/v1alpha1
    kind: SealedSecret
    metadata:
      name: docker-registry
      namespace: production
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: "true"
    spec:
      encryptedData:
        .dockerconfigjson: AgBy3i4OJSWK+PiTySYZZA9rO...
      template:
        metadata:
          name: docker-registry
        type: kubernetes.io/dockerconfigjson
