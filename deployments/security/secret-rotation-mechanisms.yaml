# Secret Rotation Mechanisms for Comprehensive Secret Management
# This file defines automated secret rotation workflows and policies

---
# Secret rotation configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: config
    app.kubernetes.io/managed-by: homelab-security
data:
  rotation-policy.yaml: |
    # Secret Rotation Policy Configuration
    rotation:
      # Default rotation intervals
      intervals:
        certificates: "30d"     # Certificate rotation every 30 days
        api_keys: "90d"        # API key rotation every 90 days
        passwords: "180d"      # Password rotation every 180 days
        ssh_keys: "365d"       # SSH key rotation annually

      # Critical secret intervals (shorter)
      critical_intervals:
        database_passwords: "30d"
        admin_tokens: "7d"
        service_account_keys: "60d"

      # Rotation schedule
      schedule:
        daily_check: "0 2 * * *"        # Daily expiration check at 2 AM
        weekly_rotation: "0 3 * * 0"    # Weekly rotation on Sunday at 3 AM
        monthly_audit: "0 4 1 * *"      # Monthly audit on 1st at 4 AM

      # Notification settings
      notifications:
        webhook_url: "https://homelab.local/hooks/secret-rotation"
        email: "tz-dev@vectorweight.com"
        slack_enabled: false
        teams_enabled: false

      # Backup configuration
      backup:
        enabled: true
        retention_days: 90
        encrypt_backups: true
        storage_class: "longhorn"

---
# Secret rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-job
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/managed-by: homelab-security
spec:
  schedule: "0 2 * * *" # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: secret-rotation
            app.kubernetes.io/component: job
        spec:
          serviceAccountName: secret-rotation-sa
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            fsGroup: 65534
          containers:
            - name: secret-rotator
              image: quay.io/homelab/secret-rotator:v1.0.0
              imagePullPolicy: IfNotPresent
              env:
                - name: ROTATION_CONFIG
                  valueFrom:
                    configMapKeyRef:
                      name: secret-rotation-config
                      key: rotation-policy.yaml
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              volumeMounts:
                - name: config
                  mountPath: /etc/secret-rotation
                  readOnly: true
                - name: backup-storage
                  mountPath: /backup
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
          volumes:
            - name: config
              configMap:
                name: secret-rotation-config
            - name: backup-storage
              persistentVolumeClaim:
                claimName: secret-backup-pvc

---
# Service Account for secret rotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotation-sa
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: service-account
    app.kubernetes.io/managed-by: homelab-security
automountServiceAccountToken: true

---
# ClusterRole for secret rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-rotation-role
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: cluster-role
    app.kubernetes.io/managed-by: homelab-security
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["bitnami.com"]
    resources: ["sealedsecrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["apps"]
    resources: ["deployments", "statefulsets", "daemonsets"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]

---
# ClusterRoleBinding for secret rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-rotation-binding
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: cluster-role-binding
    app.kubernetes.io/managed-by: homelab-security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secret-rotation-role
subjects:
  - kind: ServiceAccount
    name: secret-rotation-sa
    namespace: kube-system

---
# PersistentVolumeClaim for secret backups
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: secret-backup-pvc
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: backup-storage
    app.kubernetes.io/managed-by: homelab-security
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn

---
# Sealed Secret Controller configuration for rotation
apiVersion: v1
kind: ConfigMap
metadata:
  name: sealed-secrets-rotation-config
  namespace: kube-system
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: rotation-config
    app.kubernetes.io/managed-by: homelab-security
data:
  controller.yaml: |
    # Sealed Secrets Controller rotation configuration
    controller:
      # Key rotation settings
      keyRotation:
        enabled: true
        schedule: "0 0 1 * *"  # Monthly on the 1st
        keyRenewalThreshold: "30d"

      # Certificate rotation for sealed secrets
      certificateRotation:
        enabled: true
        renewBefore: "720h"  # 30 days

      # Backup settings
      backup:
        enabled: true
        schedule: "0 1 * * *"  # Daily at 1 AM
        retention: "90d"

      # Monitoring
      monitoring:
        enabled: true
        metrics_port: 8080
        healthcheck_port: 8081

---
# Database credential rotation template
apiVersion: v1
kind: Secret
metadata:
  name: database-rotation-template
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: template
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    secret-rotation.homelab.local/template: "true"
    secret-rotation.homelab.local/interval: "30d"
    secret-rotation.homelab.local/type: "database"
type: Opaque
data:
  rotation-script: |
    #!/bin/bash
    # Database credential rotation script template

    set -euo pipefail

    # Configuration
    DB_HOST="${DB_HOST}"
    DB_PORT="${DB_PORT:-5432}"
    DB_NAME="${DB_NAME}"
    CURRENT_USER="${CURRENT_USER}"

    # Generate new credentials
    NEW_PASSWORD=$(openssl rand -base64 32)
    NEW_USER="${CURRENT_USER}_$(date +%Y%m%d)"

    # Connect to database and rotate credentials
    export PGPASSWORD="${CURRENT_PASSWORD}"

    # Create new user
    psql -h "${DB_HOST}" -p "${DB_PORT}" -U "${CURRENT_USER}" -d "${DB_NAME}" -c \
      "CREATE USER ${NEW_USER} WITH PASSWORD '${NEW_PASSWORD}';"

    # Grant same privileges as current user
    psql -h "${DB_HOST}" -p "${DB_PORT}" -U "${CURRENT_USER}" -d "${DB_NAME}" -c \
      "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${NEW_USER};"

    # Update Kubernetes secret
    kubectl create secret generic "${SECRET_NAME}" \
      --from-literal=username="${NEW_USER}" \
      --from-literal=password="${NEW_PASSWORD}" \
      --from-literal=host="${DB_HOST}" \
      --from-literal=port="${DB_PORT}" \
      --from-literal=database="${DB_NAME}" \
      --dry-run=client -o yaml | kubectl apply -f -

    # Rolling restart applications using this secret
    kubectl rollout restart deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}"

    # Wait for rollout to complete
    kubectl rollout status deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}" --timeout=300s

    # Remove old user (after successful rotation)
    sleep 60
    psql -h "${DB_HOST}" -p "${DB_PORT}" -U "${NEW_USER}" -d "${DB_NAME}" -c \
      "DROP USER IF EXISTS ${CURRENT_USER};"

    echo "Database credential rotation completed successfully"

---
# API key rotation template
apiVersion: v1
kind: Secret
metadata:
  name: api-key-rotation-template
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: template
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    secret-rotation.homelab.local/template: "true"
    secret-rotation.homelab.local/interval: "90d"
    secret-rotation.homelab.local/type: "api-key"
type: Opaque
data:
  rotation-script: |
    #!/bin/bash
    # API key rotation script template

    set -euo pipefail

    # Configuration
    API_ENDPOINT="${API_ENDPOINT}"
    CURRENT_API_KEY="${CURRENT_API_KEY}"

    # Generate new API key
    NEW_API_KEY=$(curl -s -X POST "${API_ENDPOINT}/api/keys" \
      -H "Authorization: Bearer ${CURRENT_API_KEY}" \
      -H "Content-Type: application/json" \
      -d '{"name": "rotated-key-'$(date +%Y%m%d)'", "scopes": ["read", "write"]}' | \
      jq -r '.key')

    if [ "${NEW_API_KEY}" = "null" ] || [ -z "${NEW_API_KEY}" ]; then
      echo "Failed to generate new API key"
      exit 1
    fi

    # Update Kubernetes secret
    kubectl create secret generic "${SECRET_NAME}" \
      --from-literal=api-key="${NEW_API_KEY}" \
      --dry-run=client -o yaml | kubectl apply -f -

    # Rolling restart applications using this secret
    kubectl rollout restart deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}"

    # Wait for rollout to complete
    kubectl rollout status deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}" --timeout=300s

    # Revoke old API key
    sleep 60
    curl -s -X DELETE "${API_ENDPOINT}/api/keys" \
      -H "Authorization: Bearer ${NEW_API_KEY}" \
      -H "Content-Type: application/json" \
      -d '{"key": "'${CURRENT_API_KEY}'"}'

    echo "API key rotation completed successfully"

---
# SSH key rotation template
apiVersion: v1
kind: Secret
metadata:
  name: ssh-key-rotation-template
  namespace: kube-system
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: template
    app.kubernetes.io/managed-by: homelab-security
  annotations:
    secret-rotation.homelab.local/template: "true"
    secret-rotation.homelab.local/interval: "365d"
    secret-rotation.homelab.local/type: "ssh-key"
type: Opaque
data:
  rotation-script: |
    #!/bin/bash
    # SSH key rotation script template

    set -euo pipefail

    # Generate new SSH key pair
    ssh-keygen -t ed25519 -f /tmp/new_ssh_key -N "" -C "homelab-rotated-$(date +%Y%m%d)"

    # Read new keys
    NEW_PRIVATE_KEY=$(cat /tmp/new_ssh_key)
    NEW_PUBLIC_KEY=$(cat /tmp/new_ssh_key.pub)

    # Update Kubernetes secret
    kubectl create secret generic "${SECRET_NAME}" \
      --from-literal=ssh-privatekey="${NEW_PRIVATE_KEY}" \
      --from-literal=ssh-publickey="${NEW_PUBLIC_KEY}" \
      --dry-run=client -o yaml | kubectl apply -f -

    # Rolling restart applications using this secret
    kubectl rollout restart deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}"

    # Wait for rollout to complete
    kubectl rollout status deployment -l "secret-rotation.homelab.local/uses=${SECRET_NAME}" --timeout=300s

    # Clean up temporary files
    rm -f /tmp/new_ssh_key /tmp/new_ssh_key.pub

    echo "SSH key rotation completed successfully"

---
# Secret expiration monitoring alert
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-expiration-alerts
  namespace: monitoring
  labels:
    app.kubernetes.io/name: secret-rotation
    app.kubernetes.io/component: alerts
    app.kubernetes.io/managed-by: homelab-security
data:
  alerts.yaml: |
    groups:
    - name: secret-expiration
      rules:
      - alert: SecretExpiringInSevenDays
        expr: secret_expiry_days < 7
        for: 1h
        labels:
          severity: warning
          component: secret-rotation
        annotations:
          summary: "Secret {{ $labels.secret_name }} expires in {{ $value }} days"
          description: "Secret {{ $labels.secret_name }} in namespace {{ $labels.namespace }} expires in {{ $value }} days"

      - alert: SecretExpiringInOneDays
        expr: secret_expiry_days < 1
        for: 0m
        labels:
          severity: critical
          component: secret-rotation
        annotations:
          summary: "Secret {{ $labels.secret_name }} expires in {{ $value }} days"
          description: "Secret {{ $labels.secret_name }} in namespace {{ $labels.namespace }} expires in {{ $value }} days"

      - alert: SecretRotationFailed
        expr: secret_rotation_failed > 0
        for: 5m
        labels:
          severity: critical
          component: secret-rotation
        annotations:
          summary: "Secret rotation failed for {{ $labels.secret_name }}"
          description: "Secret rotation failed for {{ $labels.secret_name }} in namespace {{ $labels.namespace }}"
