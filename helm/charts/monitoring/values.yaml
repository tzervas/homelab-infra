global:
  domain: "homelab.local"
  storageClass: "longhorn"

  # Security contexts for rootless deployment
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

kube-prometheus-stack:
  enabled: true

  prometheus:
    prometheusSpec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL
      retention: "30d"
      retentionSize: "45GB"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 50Gi
      resources:
        limits:
          cpu: 2000m
          memory: 8Gi
        requests:
          cpu: 500m
          memory: 2Gi
      ruleSelector: {}
      ruleNamespaceSelector: {}
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelector: {}
      serviceMonitorNamespaceSelector: {}
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelector: {}
      podMonitorNamespaceSelector: {}
      podMonitorSelectorNilUsesHelmValues: false

  alertmanager:
    alertmanagerSpec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
        capabilities:
          drop:
            - ALL
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            resources:
              requests:
                storage: 10Gi
      resources:
        limits:
          cpu: 200m
          memory: 256Mi
        requests:
          cpu: 100m
          memory: 128Mi

  grafana:
    enabled: false  # Use standalone Grafana for better control

  kubeStateMetrics:
    enabled: true

  nodeExporter:
    enabled: true

  prometheusOperator:
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      fsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

loki:
  enabled: true

  # Use simple filesystem storage for single binary mode
  storage:
    type: filesystem

  # Configure schema for filesystem storage
  schemaConfig:
    configs:
      - from: 2024-04-01
        store: boltdb-shipper
        object_store: filesystem
        schema: v12
        index:
          prefix: loki_index_
          period: 24h

  # Use structured config to override defaults
  structuredConfig:
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9095
      grpc_server_max_recv_msg_size: 8388608
      grpc_server_max_send_msg_size: 8388608

    ingester:
      lifecycler:
        address: 127.0.0.1
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1
        final_sleep: 0s
      chunk_idle_period: 1h
      max_chunk_age: 1h
      chunk_target_size: 1048576
      chunk_retain_period: 30s

    limits_config:
      retention_period: 744h
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20
      per_stream_rate_limit: 3MB
      per_stream_rate_limit_burst: 15MB

    compactor:
      working_directory: /var/loki/boltdb-shipper-compactor
      shared_store: filesystem
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
      retention_delete_worker_count: 150

    ruler:
      storage:
        type: local
        local:
          directory: /var/loki/rules
      rule_path: /var/loki/rules-temp
      alertmanager_url: http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093
      ring:
        kvstore:
          store: inmemory

  # Additional storage config for filesystem
  storage_config:
    boltdb_shipper:
      active_index_directory: /var/loki/boltdb-shipper-active
      cache_location: /var/loki/boltdb-shipper-cache
      cache_ttl: 24h
      shared_store: filesystem
    filesystem:
      directory: /var/loki/chunks

  # Single binary deployment
  replicas: 1

# Disable scalable targets for single binary mode
write:
  replicas: 0
read:
  replicas: 0
backend:
  replicas: 0

  singleBinary:
    securityContext:
      runAsNonRoot: true
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 200m
        memory: 512Mi
    persistence:
      enabled: true
      storageClass: longhorn
      size: 20Gi

promtail:
  enabled: true
  securityContext:
    # SECURITY JUSTIFICATION: Root access required for log collection
    # - Reading system and application logs from /var/log/*
    # - Accessing logs owned by different system users (root, syslog, etc.)
    # - Host filesystem access for comprehensive log collection
    # - Container runtime log access (Docker/containerd logs)
    # Mitigation: Capabilities restricted to read operations only (DAC_READ_SEARCH)
    # Alternative: Non-root log collection would miss critical system logs
    runAsNonRoot: false  # Promtail needs root to read protected log files
    runAsUser: 0
    runAsGroup: 0
    capabilities:
      drop:
        - ALL
      add:
        - DAC_READ_SEARCH  # Required for reading logs across different ownership
    seccompProfile:
      type: RuntimeDefault
  config:
    clients:
      - url: http://loki:3100/loki/api/v1/push
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

grafana:
  enabled: true

  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

  persistence:
    enabled: true
    storageClassName: longhorn
    size: 10Gi

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  adminPassword: "admin"  # Change this in production

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://kube-prometheus-stack-prometheus:9090
          access: proxy
          isDefault: true
        - name: Loki
          type: loki
          url: http://loki:3100
          access: proxy

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
        - name: 'infrastructure'
          orgId: 1
          folder: 'Infrastructure'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/infrastructure
        - name: 'security'
          orgId: 1
          folder: 'Security'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/security
        - name: 'deployment'
          orgId: 1
          folder: 'Deployment'
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/deployment

  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.homelab.local
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.homelab.local

# Enhanced Monitoring Features
helmReleaseMonitoring:
  enabled: true
  image:
    repository: ghcr.io/helm/helm-release-monitor
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  checkInterval: "300s"
  namespaceSelector: "*"
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

terraformStateMonitoring:
  enabled: true
  image:
    repository: homelab/terraform-state-monitor
    tag: "v1.0.0"
    pullPolicy: IfNotPresent
  checkInterval: "300s"
  environments:
    - development
    - staging
    - production
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

certificateMonitoring:
  enabled: true
  checkInterval: "3600s"  # 1 hour
  warningThreshold: "168h"  # 7 days
  criticalThreshold: "24h"   # 1 day

securityPolicyMonitoring:
  enabled: true
  podSecurityPolicies: true
  networkPolicies: true
  rbacPolicies: true
  falcoIntegration: true

structuredLogging:
  enabled: true
  logLevel: "info"
  format: "json"
  additionalFields:
    cluster: "homelab"
    environment: "{{ .Values.global.environment | default \"development\" }}"

# Custom Grafana Dashboards
customDashboards:
  enabled: true

  # Infrastructure provisioning dashboard
  infrastructureProvisioning:
    enabled: true
    datasource: Prometheus

  # Deployment pipeline metrics dashboard
  deploymentPipeline:
    enabled: true
    datasource: Prometheus

  # Security compliance dashboard
  securityCompliance:
    enabled: true
    datasource: Prometheus

  # Cost tracking dashboard (if applicable)
  costTracking:
    enabled: false  # Enable if cost metrics are available
    datasource: Prometheus
