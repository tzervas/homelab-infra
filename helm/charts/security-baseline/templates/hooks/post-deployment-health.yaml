---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "security-baseline.fullname" . }}-health-script
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "security-baseline.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  health-check.sh: |
    #!/bin/bash
    set -euo pipefail
    
    echo "üè• Starting post-deployment health checks..."
    
    # Function to wait for resource to be ready
    wait_for_resource() {
      local resource_type=$1
      local resource_name=$2
      local namespace=${3:-{{ .Release.Namespace }}}
      local timeout=${4:-300}
      
      echo "‚è≥ Waiting for $resource_type/$resource_name in namespace $namespace..."
      kubectl wait --for=condition=available --timeout=${timeout}s "$resource_type/$resource_name" -n "$namespace" || {
        echo "‚ùå $resource_type/$resource_name failed to become ready"
        return 1
      }
      echo "‚úÖ $resource_type/$resource_name is ready"
    }
    
    # Function to check pod security standards
    check_pod_security() {
      echo "üîí Checking Pod Security Standards compliance..."
      
      # Get all pods in the namespace
      local pods=$(kubectl get pods -n {{ .Release.Namespace }} -o name 2>/dev/null || echo "")
      
      if [ -z "$pods" ]; then
        echo "‚ÑπÔ∏è  No pods found in namespace {{ .Release.Namespace }}"
        return 0
      fi
      
      for pod in $pods; do
        local pod_name=$(echo "$pod" | cut -d'/' -f2)
        echo "üîç Checking pod: $pod_name"
        
        # Check security context
        local security_context=$(kubectl get "$pod" -n {{ .Release.Namespace }} -o jsonpath='{.spec.securityContext}' 2>/dev/null || echo "{}")
        if [ "$security_context" = "{}" ]; then
          echo "‚ö†Ô∏è  Pod $pod_name has no security context defined"
        else
          echo "‚úÖ Pod $pod_name has security context configured"
        fi
        
        # Check for privileged containers
        local privileged=$(kubectl get "$pod" -n {{ .Release.Namespace }} -o jsonpath='{.spec.containers[*].securityContext.privileged}' 2>/dev/null || echo "")
        if [[ "$privileged" == *"true"* ]]; then
          echo "‚ö†Ô∏è  Pod $pod_name contains privileged containers"
        fi
      done
    }
    
    # Function to test network policies
    test_network_policies() {
      echo "üåê Testing network policies..."
      
      local policies=$(kubectl get networkpolicies -n {{ .Release.Namespace }} -o name 2>/dev/null | wc -l)
      if [ "$policies" -gt 0 ]; then
        echo "‚úÖ Found $policies network policies in namespace {{ .Release.Namespace }}"
        
        # List the policies
        kubectl get networkpolicies -n {{ .Release.Namespace }} -o custom-columns=NAME:.metadata.name,TYPE:.metadata.labels."network-policy\.homelab\.local/type"
      else
        echo "‚ÑπÔ∏è  No network policies found in namespace {{ .Release.Namespace }}"
      fi
    }
    
    # Function to verify RBAC
    verify_rbac() {
      echo "üîë Verifying RBAC configuration..."
      
      local sa_name="{{ include "security-baseline.serviceAccountName" . }}"
      if kubectl get serviceaccount "$sa_name" -n {{ .Release.Namespace }} &>/dev/null; then
        echo "‚úÖ Service account $sa_name exists"
        
        # Check role bindings
        local bindings=$(kubectl get rolebindings -n {{ .Release.Namespace }} -o name 2>/dev/null | grep "$(echo {{ include "security-baseline.fullname" . }} | tr '[:upper:]' '[:lower:]')" | wc -l)
        echo "‚úÖ Found $bindings role bindings for this release"
      else
        echo "‚ö†Ô∏è  Service account $sa_name not found"
      fi
    }
    
    # Function to check resource limits
    check_resource_limits() {
      echo "üìä Checking resource limits and requests..."
      
      local pods=$(kubectl get pods -n {{ .Release.Namespace }} -o name 2>/dev/null || echo "")
      
      for pod in $pods; do
        local pod_name=$(echo "$pod" | cut -d'/' -f2)
        
        # Check if containers have resource limits
        local containers=$(kubectl get "$pod" -n {{ .Release.Namespace }} -o jsonpath='{.spec.containers[*].name}' 2>/dev/null || echo "")
        
        for container in $containers; do
          local limits=$(kubectl get "$pod" -n {{ .Release.Namespace }} -o jsonpath="{.spec.containers[?(@.name=='$container')].resources.limits}" 2>/dev/null || echo "{}")
          local requests=$(kubectl get "$pod" -n {{ .Release.Namespace }} -o jsonpath="{.spec.containers[?(@.name=='$container')].resources.requests}" 2>/dev/null || echo "{}")
          
          if [ "$limits" = "{}" ] || [ "$limits" = "" ]; then
            echo "‚ö†Ô∏è  Container $container in pod $pod_name has no resource limits"
          else
            echo "‚úÖ Container $container in pod $pod_name has resource limits"
          fi
          
          if [ "$requests" = "{}" ] || [ "$requests" = "" ]; then
            echo "‚ö†Ô∏è  Container $container in pod $pod_name has no resource requests"
          else
            echo "‚úÖ Container $container in pod $pod_name has resource requests"
          fi
        done
      done
    }
    
    # Function to test TLS configuration
    test_tls_config() {
      echo "üîê Testing TLS configuration..."
      
      {{- if .Values.global.tls.enabled }}
      # Check for TLS secrets
      if kubectl get secret {{ .Values.global.tls.secretName }} -n {{ .Release.Namespace }} &>/dev/null; then
        echo "‚úÖ TLS secret {{ .Values.global.tls.secretName }} found"
        
        # Verify certificate validity
        local cert_data=$(kubectl get secret {{ .Values.global.tls.secretName }} -n {{ .Release.Namespace }} -o jsonpath='{.data.tls\.crt}' | base64 -d)
        local expiry=$(echo "$cert_data" | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2 || echo "Unable to parse")
        echo "üìÖ Certificate expires: $expiry"
      else
        echo "‚ö†Ô∏è  TLS secret {{ .Values.global.tls.secretName }} not found"
      fi
      {{- else }}
      echo "‚ÑπÔ∏è  TLS is disabled in configuration"
      {{- end }}
    }
    
    # Function to check monitoring endpoints
    check_monitoring() {
      echo "üìà Checking monitoring configuration..."
      
      {{- if .Values.monitoring.serviceMonitor.enabled }}
      local service_monitors=$(kubectl get servicemonitors -n {{ .Release.Namespace }} -o name 2>/dev/null | wc -l)
      if [ "$service_monitors" -gt 0 ]; then
        echo "‚úÖ Found $service_monitors ServiceMonitor resources"
      else
        echo "‚ÑπÔ∏è  No ServiceMonitor resources found"
      fi
      {{- else }}
      echo "‚ÑπÔ∏è  ServiceMonitor is disabled in configuration"
      {{- end }}
    }
    
    # Run all health checks
    echo "üöÄ Running comprehensive health checks..."
    
    check_pod_security
    test_network_policies
    verify_rbac
    check_resource_limits
    test_tls_config
    check_monitoring
    
    # Final connectivity test
    echo "üîó Testing basic connectivity..."
    if kubectl get nodes &>/dev/null; then
      echo "‚úÖ Kubernetes API connectivity verified"
    else
      echo "‚ùå Kubernetes API connectivity failed"
      exit 1
    fi
    
    # Check DNS resolution
    if nslookup kubernetes.default.svc.cluster.local &>/dev/null; then
      echo "‚úÖ DNS resolution working"
    else
      echo "‚ö†Ô∏è  DNS resolution issues detected"
    fi
    
    echo "üéâ Post-deployment health checks completed successfully!"
    
    # Generate health report
    echo "üìã Health Report Summary:"
    echo "========================"
    echo "Namespace: {{ .Release.Namespace }}"
    echo "Release: {{ .Release.Name }}"
    echo "Chart: {{ .Chart.Name }}-{{ .Chart.Version }}"
    echo "Environment: {{ .Values.global.environment }}"
    echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    echo "Status: HEALTHY ‚úÖ"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "security-baseline.fullname" . }}-health-check
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "security-baseline.labels" . | nindent 4 }}
    job.homelab.local/type: "health-check"
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "security-baseline.selectorLabels" . | nindent 8 }}
        job.homelab.local/type: "health-check"
    spec:
      serviceAccountName: {{ include "security-baseline.serviceAccountName" . }}
      restartPolicy: Never
      securityContext:
        {{- include "security-baseline.securityContext.baseline" . | nindent 8 }}
      containers:
      - name: health-checker
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/health-check.sh"]
        securityContext:
          {{- include "security-baseline.securityContext.baseline" . | nindent 10 }}
        volumeMounts:
        - name: health-script
          mountPath: /scripts
        resources:
          {{- include "security-baseline.resources" (dict "Values" .Values "profile" "minimal") | nindent 10 }}
      volumes:
      - name: health-script
        configMap:
          name: {{ include "security-baseline.fullname" . }}-health-script
          defaultMode: 0755
