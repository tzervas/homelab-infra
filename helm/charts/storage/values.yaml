global:
  storageClass: "longhorn"

  # Security contexts for rootless deployment
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL

longhorn:
  enabled: true

  persistence:
    defaultClass: true
    defaultClassReplicaCount: 2
    defaultDataLocality: best-effort

  csi:
    attacherReplicaCount: 1
    provisionerReplicaCount: 1
    resizerReplicaCount: 1
    snapshotterReplicaCount: 1

  defaultSettings:
    backupTarget: ""  # Configure S3/NFS backup target
    backupTargetCredentialSecret: ""
    createDefaultDiskLabeledNodes: true
    defaultDataPath: "/var/lib/longhorn/"
    defaultDataLocality: "best-effort"
    replicaSoftAntiAffinity: false
    storageOverProvisioningPercentage: 200
    storageMinimalAvailablePercentage: 25
    upgradeChecker: true
    defaultReplicaCount: 2
    defaultLonghornStaticStorageClass: "longhorn"
    backupstorePollInterval: 300
    taintToleration: ""
    systemManagedComponentsNodeSelector: ""
    priorityClass: ""
    autoSalvage: true
    autoDeletePodWhenVolumeDetachedUnexpectedly: true
    disableSchedulingOnCordonedNode: true
    replicaZoneSoftAntiAffinity: true
    nodeDownPodDeletionPolicy: "delete-both-statefulset-and-deployment-pod"
    allowNodeDrainWithLastHealthyReplica: false
    mkfsExt4Parameters: "-O ^64bit,^metadata_csum"
    disableReplicaRebuild: false
    replicaReplenishmentWaitInterval: 600
    concurrentReplicaRebuildPerNodeLimit: 5
    disableRevisionCounter: true
    systemManagedPodsImagePullPolicy: "if-not-present"
    allowVolumeCreationWithDegradedAvailability: true
    autoCleanupSystemGeneratedSnapshot: true
    concurrentAutomaticEngineUpgradePerNodeLimit: 0
    backingImageCleanupWaitInterval: 60
    backingImageRecoveryWaitInterval: 300
    guaranteedEngineManagerCPU: 12
    guaranteedReplicaManagerCPU: 12

  longhornManager:
    securityContext:
      # SECURITY JUSTIFICATION: Root privileges required for Longhorn manager
      # - Volume lifecycle management (create, delete, resize persistent volumes)
      # - Direct block device access and manipulation
      # - Host filesystem operations for volume storage paths
      # - Device mapper operations for snapshot and backup functionality
      # Mitigation: Capabilities restricted to minimum required (SYS_ADMIN, DAC_OVERRIDE, MKNOD)
      runAsNonRoot: false  # Longhorn manager needs root for volume operations
      runAsUser: 0
      capabilities:
        drop:
          - ALL
        add:
          - SYS_ADMIN  # Required for mount operations and device management
          - DAC_OVERRIDE  # Required for filesystem access across different ownership
          - MKNOD  # Required for creating device nodes
      seccompProfile:
        type: RuntimeDefault
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

  longhornDriver:
    securityContext:
      # SECURITY JUSTIFICATION: Privileged access required for CSI driver operations
      # - Host volume mounting and unmounting operations
      # - Direct block device manipulation and formatting
      # - iSCSI target creation and management
      # - Host networking access for distributed storage
      # - Kernel module loading for storage protocols
      # This is the minimum privilege level required for CSI driver functionality
      # Alternative: Non-privileged CSI drivers don't support all Longhorn features
      runAsNonRoot: false  # Longhorn driver needs root for storage operations
      runAsUser: 0
      privileged: true  # Required for volume mounting and block device access
      capabilities:
        drop:
          - ALL
        add:
          - SYS_ADMIN  # Required for mount/unmount and device operations
          - DAC_OVERRIDE  # Required for filesystem access permissions
          - MKNOD  # Required for creating block device nodes
          - SYS_RESOURCE  # Required for resource allocation and limits
      seccompProfile:
        type: RuntimeDefault
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

  longhornUI:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi

  ingress:
    enabled: true
    ingressClassName: nginx
    host: longhorn.homelab.local
    tls: true
    tlsSecret: longhorn-tls
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: longhorn-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'

  service:
    ui:
      type: ClusterIP

  # Resource requirements for Longhorn components
  engineImage:
    resources:
      limits:
        cpu: 200m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 128Mi
