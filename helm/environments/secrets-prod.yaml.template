# Production Environment Secrets Template
# Copy this file to secrets-prod.yaml and populate with actual values
# DO NOT commit the actual secrets file to version control
# USE SEALED SECRETS OR EXTERNAL SECRET OPERATORS IN PRODUCTION

# TLS Certificate Configuration
tls:
  issuer: "letsencrypt-prod"  # Use production Let's Encrypt
  
# Database Credentials (use sealed secrets in production)
database:
  # adminPassword: "STRONG_PRODUCTION_DB_PASSWORD"
  # userPassword: "STRONG_PRODUCTION_USER_PASSWORD"
  # replicationPassword: "STRONG_REPLICATION_PASSWORD"

# Grafana Configuration (use sealed secrets)
grafana:
  # adminPassword: "STRONG_GRAFANA_ADMIN_PASSWORD"
  # Use sealed secrets: kubectl create secret generic grafana-admin --from-literal=admin-password=STRONG_PASSWORD --dry-run=client -o yaml | kubeseal -o yaml

# Monitoring Secrets
monitoring:
  alertmanager:
    config: |
      # Production Alertmanager configuration
      global:
        smtp_smarthost: 'smtp.homelab.local:587'
        smtp_from: 'alerts@homelab.local'
        smtp_auth_username: 'alerts@homelab.local'
        smtp_auth_password: 'CHANGE_ME_SMTP_PASSWORD'
      
      route:
        group_by: ['alertname']
        group_wait: 10s
        group_interval: 10s
        repeat_interval: 1h
        receiver: 'web.hook'
      
      receivers:
      - name: 'web.hook'
        email_configs:
        - to: 'admin@homelab.local'
          subject: '[HOMELAB ALERT] {{ .GroupLabels.alertname }}'
          body: |
            {{ range .Alerts }}
            Alert: {{ .Annotations.summary }}
            Description: {{ .Annotations.description }}
            {{ end }}

# Storage Backup Configuration
storage:
  backup:
    enabled: true
    target: "s3://homelab-backups@us-east-1/"  # Configure your backup target
    accessKey: "CHANGE_ME_S3_ACCESS_KEY"
    secretKey: "CHANGE_ME_S3_SECRET_KEY"
    encryption:
      enabled: true
      key: "CHANGE_ME_ENCRYPTION_KEY"

# OAuth/OIDC Configuration
auth:
  oidc:
    clientId: "homelab-prod"
    clientSecret: "CHANGE_ME_PROD_CLIENT_SECRET"
    issuerUrl: "https://auth.homelab.local"
    redirectUrl: "https://homelab.local/auth/callback"

# Container Registry Secrets
registry:
  dockerconfig: |
    {
      "auths": {
        "registry.homelab.local": {
          "username": "prod-user",
          "password": "CHANGE_ME_REGISTRY_PASSWORD",
          "auth": "base64_encoded_username:password"
        }
      }
    }

# Certificate Management
certificates:
  # Additional certificates for internal services
  internal:
    ca: "-----BEGIN CERTIFICATE-----\nCHANGE_ME_INTERNAL_CA_CERT\n-----END CERTIFICATE-----"
    key: "-----BEGIN PRIVATE KEY-----\nCHANGE_ME_INTERNAL_CA_KEY\n-----END PRIVATE KEY-----"

# Monitoring and Observability
observability:
  # External monitoring service API keys
  datadog:
    apiKey: "CHANGE_ME_DATADOG_API_KEY"
    appKey: "CHANGE_ME_DATADOG_APP_KEY"
  
  # Log forwarding
  logForwarding:
    endpoint: "https://logs.external-service.com"
    token: "CHANGE_ME_LOG_FORWARDING_TOKEN"

# Backup and Recovery
backup:
  encryption:
    passphrase: "CHANGE_ME_BACKUP_ENCRYPTION_PASSPHRASE"
  
  # Database backup credentials
  databases:
    postgres:
      user: "backup-user"
      password: "CHANGE_ME_BACKUP_USER_PASSWORD"

# Network Security
security:
  # VPN configuration (if using site-to-site VPN)
  vpn:
    presharedKey: "CHANGE_ME_VPN_PSK"
    certificates:
      ca: "CHANGE_ME_VPN_CA_CERT"
      cert: "CHANGE_ME_VPN_CLIENT_CERT"
      key: "CHANGE_ME_VPN_CLIENT_KEY"

# Custom Application Secrets
applications:
  # Production application secrets
  webapp:
    secretKey: "CHANGE_ME_WEBAPP_SECRET_KEY"
    databaseUrl: "postgresql://user:CHANGE_ME_PASSWORD@db.homelab.local:5432/webapp"
    
  api:
    jwtSecret: "CHANGE_ME_JWT_SECRET"
    encryptionKey: "CHANGE_ME_API_ENCRYPTION_KEY"

# Network Policies - Production specific (more restrictive)
networkPolicies:
  custom:
    - name: "allow-monitoring-ingress"
      podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
      policyTypes:
        - Ingress
      ingress:
        - from:
          - podSelector:
              matchLabels:
                app.kubernetes.io/name: grafana
          ports:
          - protocol: TCP
            port: 9090
            
    - name: "allow-db-access"
      podSelector:
        matchLabels:
          app: database
      policyTypes:
        - Ingress
      ingress:
        - from:
          - podSelector:
              matchLabels:
                access-db: "true"
          ports:
          - protocol: TCP
            port: 5432
