# Enhanced Helmfile Configuration with Security Baseline Integration
# This helmfile implements security-first deployments with comprehensive hooks and templating

repositories:
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: grafana
    url: https://grafana.github.io/helm-charts
  - name: ingress-nginx
    url: https://kubernetes.github.io/ingress-nginx
  - name: jetstack
    url: https://charts.jetstack.io
  - name: metallb
    url: https://metallb.github.io/metallb
  - name: longhorn
    url: https://charts.longhorn.io
  - name: sealed-secrets
    url: https://bitnami-labs.github.io/sealed-secrets

# Enhanced environment configuration with security baseline integration
environments:
  development:
    values:
      - environments/values-dev.yaml
      - charts/security-baseline/values.yaml
    secrets:
      - environments/secrets-dev.yaml
  staging:
    values:
      - environments/values-staging.yaml
      - charts/security-baseline/values.yaml
    secrets:
      - environments/secrets-staging.yaml
  production:
    values:
      - environments/values-prod.yaml
      - charts/security-baseline/values.yaml
    secrets:
      - environments/secrets-prod.yaml

# Global hooks for all releases
hooks:
  - events: ["presync"]
    showlogs: true
    command: "bash"
    args:
      - "-c"
      - |
        echo "üîç Pre-sync validation started..."
        
        # Validate Kubernetes cluster connectivity
        if ! kubectl cluster-info &>/dev/null; then
          echo "‚ùå Kubernetes cluster is not accessible"
          exit 1
        fi
        
        # Check if required namespaces exist
        for ns in metallb-system cert-manager ingress-nginx longhorn-system monitoring; do
          if ! kubectl get namespace "$ns" &>/dev/null; then
            echo "üìù Creating namespace: $ns"
            kubectl create namespace "$ns" || true
          fi
        done
        
        # Apply pod security standards to namespaces
        kubectl label namespace metallb-system pod-security.kubernetes.io/enforce=privileged --overwrite=true
        kubectl label namespace cert-manager pod-security.kubernetes.io/enforce=baseline --overwrite=true
        kubectl label namespace ingress-nginx pod-security.kubernetes.io/enforce=baseline --overwrite=true
        kubectl label namespace longhorn-system pod-security.kubernetes.io/enforce=baseline --overwrite=true
        kubectl label namespace monitoring pod-security.kubernetes.io/enforce=baseline --overwrite=true
        
        echo "‚úÖ Pre-sync validation completed"
        
  - events: ["postsync"]
    showlogs: true
    command: "bash"
    args:
      - "-c"
      - |
        echo "üè• Post-sync health check started..."
        
        # Wait for critical deployments to be ready
        critical_deployments=(
          "metallb-system:metallb-controller"
          "cert-manager:cert-manager"
          "ingress-nginx:ingress-nginx-controller"
        )
        
        for deployment in "${critical_deployments[@]}"; do
          namespace=$(echo "$deployment" | cut -d: -f1)
          name=$(echo "$deployment" | cut -d: -f2)
          echo "‚è≥ Waiting for deployment $namespace/$name..."
          kubectl wait --for=condition=available --timeout=300s deployment/"$name" -n "$namespace" || {
            echo "‚ö†Ô∏è  Deployment $namespace/$name failed to become ready"
          }
        done
        
        echo "‚úÖ Post-sync health check completed"

# Common template values
commonLabels: &commonLabels
  app.kubernetes.io/managed-by: helmfile
  security.homelab.local/baseline: "enabled"
  homelab.local/environment: "{{ .Environment.Name }}"

# Security baseline template
securityBaseline: &securityBaseline
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop:
        - ALL
  resources:
    limits:
      cpu: "{{ .Values.resources.defaults.limits.cpu | default "500m" }}"
      memory: "{{ .Values.resources.defaults.limits.memory | default "512Mi" }}"
    requests:
      cpu: "{{ .Values.resources.defaults.requests.cpu | default "100m" }}"
      memory: "{{ .Values.resources.defaults.requests.memory | default "128Mi" }}"

releases:
  # Security Baseline - Deploy First
  - name: security-baseline
    namespace: security-system
    createNamespace: true
    chart: ./charts/security-baseline
    values:
      - charts/security-baseline/values.yaml
      - environments/values-{{ .Environment.Name }}.yaml
    labels:
      <<: *commonLabels
      component: security
      tier: baseline
    hooks:
      - events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            echo "üîí Applying security baseline policies..."
            # Apply pod security standards
            kubectl label namespace security-system pod-security.kubernetes.io/enforce=baseline --overwrite=true
            kubectl label namespace security-system pod-security.kubernetes.io/audit=restricted --overwrite=true
            kubectl label namespace security-system pod-security.kubernetes.io/warn=restricted --overwrite=true
            echo "‚úÖ Security baseline policies applied"
    wait: true
    timeout: 300

  # Core Infrastructure - Deploy Second
  - name: metallb
    namespace: metallb-system
    createNamespace: true
    chart: metallb/metallb
    version: "0.14.8"
    values:
      - charts/core-infrastructure/values.yaml
      - charts/core-infrastructure/values-{{ .Environment.Name }}.yaml
    set:
      - name: controller.resources.limits.cpu
        value: "100m"
      - name: controller.resources.limits.memory
        value: "100Mi"
    wait: true
    timeout: 300

  - name: cert-manager
    namespace: cert-manager
    createNamespace: true
    chart: jetstack/cert-manager
    version: "v1.15.3"
    values:
      - charts/core-infrastructure/values.yaml
      - charts/core-infrastructure/values-{{ .Environment.Name }}.yaml
    set:
      - name: installCRDs
        value: true
    wait: true
    timeout: 300
    needs:
      - metallb

  - name: ingress-nginx
    namespace: ingress-nginx
    createNamespace: true
    chart: ingress-nginx/ingress-nginx
    version: "4.11.2"
    values:
      - charts/core-infrastructure/values.yaml
      - charts/core-infrastructure/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 300
    needs:
      - metallb
      - cert-manager

  - name: sealed-secrets
    namespace: kube-system
    chart: sealed-secrets/sealed-secrets
    version: "2.16.1"
    values:
      - charts/core-infrastructure/values.yaml
      - charts/core-infrastructure/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 300

  # Storage - Deploy Second
  - name: longhorn
    namespace: longhorn-system
    createNamespace: true
    chart: longhorn/longhorn
    version: "1.7.1"
    values:
      - charts/storage/values.yaml
      - charts/storage/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 600
    needs:
      - ingress-nginx

  # Monitoring Stack - Deploy Last
  - name: kube-prometheus-stack
    namespace: monitoring
    createNamespace: true
    chart: prometheus-community/kube-prometheus-stack
    version: "61.7.2"
    values:
      - charts/monitoring/values.yaml
      - charts/monitoring/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 600
    needs:
      - longhorn
      - ingress-nginx

  - name: loki
    namespace: monitoring
    chart: grafana/loki
    version: "6.6.4"
    values:
      - charts/monitoring/values.yaml
      - charts/monitoring/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 300
    needs:
      - longhorn

  - name: promtail
    namespace: monitoring
    chart: grafana/promtail
    version: "6.16.4"
    values:
      - charts/monitoring/values.yaml
      - charts/monitoring/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 300
    needs:
      - loki

  - name: grafana
    namespace: monitoring
    chart: grafana/grafana
    version: "8.4.2"
    values:
      - charts/monitoring/values.yaml
      - charts/monitoring/values-{{ .Environment.Name }}.yaml
    wait: true
    timeout: 300
    needs:
      - kube-prometheus-stack
      - loki
