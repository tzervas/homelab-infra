---
apiVersion: v1
kind: Secret
metadata:
  name: jupyterhub-oauth-secret
  namespace: jupyter
type: Opaque
stringData:
  client-secret: jupyterlab-client-secret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
  namespace: jupyter
data:
  jupyterhub_config.py: |
    import os
    from oauthenticator.generic import GenericOAuthenticator

    c.JupyterHub.authenticator_class = GenericOAuthenticator

    # Keycloak OAuth2 configuration
    c.GenericOAuthenticator.client_id = 'jupyterlab'
    c.GenericOAuthenticator.client_secret = os.environ.get('OAUTH_CLIENT_SECRET')
    c.GenericOAuthenticator.oauth_callback_url = 'https://jupyter.homelab.local/hub/oauth_callback'

    # Keycloak endpoints
    c.GenericOAuthenticator.authorize_url = 'https://auth.homelab.local/realms/homelab/protocol/openid-connect/auth'
    c.GenericOAuthenticator.token_url = 'https://auth.homelab.local/realms/homelab/protocol/openid-connect/token'
    c.GenericOAuthenticator.userdata_url = 'https://auth.homelab.local/realms/homelab/protocol/openid-connect/userinfo'
    c.GenericOAuthenticator.logout_redirect_url = 'https://auth.homelab.local/realms/homelab/protocol/openid-connect/logout'

    # User data mapping
    c.GenericOAuthenticator.username_claim = 'preferred_username'
    c.GenericOAuthenticator.userdata_params = {'state': 'state'}
    c.GenericOAuthenticator.userdata_method = 'GET'

    # Allow all authenticated users
    c.GenericOAuthenticator.allow_all = True
    c.GenericOAuthenticator.scope = ['openid', 'profile', 'email']

    # Admin users based on Keycloak roles
    c.GenericOAuthenticator.admin_users = {'admin', 'tzervas'}
    c.GenericOAuthenticator.claim_groups_key = 'groups'
    c.GenericOAuthenticator.allowed_groups = {'platform-admins', 'developers', 'users'}

    # JupyterHub configuration
    c.JupyterHub.ip = '0.0.0.0'
    c.JupyterHub.port = 8000
    c.JupyterHub.hub_ip = '0.0.0.0'
    c.JupyterHub.hub_port = 8081

    # Spawner configuration
    c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    c.KubeSpawner.namespace = 'jupyter'
    c.KubeSpawner.service_account = 'jupyterhub'
    c.KubeSpawner.image = 'jupyter/scipy-notebook:latest'
    c.KubeSpawner.default_url = '/lab'
    c.KubeSpawner.start_timeout = 600

    # Resource limits
    c.KubeSpawner.cpu_guarantee = 0.5
    c.KubeSpawner.cpu_limit = 2
    c.KubeSpawner.mem_guarantee = '1Gi'
    c.KubeSpawner.mem_limit = '4Gi'

    # Storage
    c.KubeSpawner.storage_pvc_ensure = True
    c.KubeSpawner.storage_class = 'standard'
    c.KubeSpawner.storage_capacity = '10Gi'

    # Security
    c.JupyterHub.cookie_secret_file = '/srv/jupyterhub/cookie_secret'
    c.JupyterHub.proxy_auth_token = os.environ.get('PROXY_AUTH_TOKEN')

    # SSL/TLS handled by ingress
    c.JupyterHub.bind_url = 'http://0.0.0.0:8000'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jupyterhub
  namespace: jupyter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jupyterhub
  namespace: jupyter
rules:
- apiGroups: [""]
  resources: ["pods", "persistentvolumeclaims", "services"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jupyterhub
  namespace: jupyter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyterhub
subjects:
- kind: ServiceAccount
  name: jupyterhub
  namespace: jupyter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterhub
  namespace: jupyter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterhub
  template:
    metadata:
      labels:
        app: jupyterhub
    spec:
      serviceAccountName: jupyterhub
      containers:
      - name: jupyterhub
        image: quay.io/jupyterhub/k8s-hub:3.3.0
        ports:
        - containerPort: 8000
        - containerPort: 8081
        env:
        - name: OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: jupyterhub-oauth-secret
              key: client-secret
        - name: PROXY_AUTH_TOKEN
          value: "generated-proxy-token-replace-this"
        - name: PYTHONUNBUFFERED
          value: "1"
        command:
          - jupyterhub
          - -f
          - /etc/jupyterhub/jupyterhub_config.py
        volumeMounts:
        - name: config
          mountPath: /etc/jupyterhub
        - name: data
          mountPath: /srv/jupyterhub
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: jupyterhub-config
      - name: data
        persistentVolumeClaim:
          claimName: jupyterhub-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jupyterhub-data
  namespace: jupyter
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: jupyterhub
  namespace: jupyter
spec:
  selector:
    app: jupyterhub
  ports:
    - name: http
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: api
      protocol: TCP
      port: 8081
      targetPort: 8081
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jupyter-https-ingress
  namespace: jupyter
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    cert-manager.io/cluster-issuer: "homelab-ca-issuer"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - jupyter.homelab.local
    secretName: jupyter-tls-cert
  rules:
  - host: jupyter.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jupyterhub
            port:
              number: 8000
