[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["scripts"]

[project]
name = "homelab-testing-framework"
version = "0.3.1"
description = "Comprehensive testing framework for homelab infrastructure validation"
readme = "scripts/testing/README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    {name = "Tyler Zervas", email = "tz-dev@vectorweight.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "kubernetes>=28.0.0",
    "requests>=2.31.0",
    "pyyaml>=6.0.1",
    "jsonschema>=4.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.6.0",  # Replaces black, isort, flake8, etc.
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    # Additional dev tools for code quality
    "bandit[toml]>=1.7.5",  # Security linting
    "safety>=3.0.0",  # Dependency vulnerability scanning
    "yamllint>=1.35.0",  # YAML linting
    "ansible-lint>=24.9.0",  # Ansible playbook linting
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
]

lint = [
    "ruff>=0.6.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "yamllint>=1.35.0",
    "ansible-lint>=24.9.0",
]

[project.urls]
Homepage = "https://github.com/tzervas/homelab-infra"
Repository = "https://github.com/tzervas/homelab-infra.git"
Issues = "https://github.com/tzervas/homelab-infra/issues"

[project.scripts]
homelab-test = "scripts.testing.test_reporter:main"
homelab-config-validator = "scripts.testing.config_validator:main"
homelab-health = "scripts.testing.infrastructure_health:main"
homelab-service-check = "scripts.testing.service_checker:main"
homelab-security = "scripts.testing.network_security:main"
homelab-integration = "scripts.testing.integration_tester:main"

# Ruff configuration (replaces black, isort, flake8, etc.)
[tool.ruff]
line-length = 100
target-version = "py310"
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".tox",
    ".venv",
    "build",
    "dist",
    "untracked_backup",
    "examples",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "COM", # flake8-commas
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TRY", # tryceratops
    "FBT", # flake8-boolean-trap
    "RUF", # Ruff-specific rules
    "G",   # flake8-logging-format
    "ANN", # flake8-annotations
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "ERA", # eradicate
    "PL",  # pylint
    "PERF", # Perflint
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "S101",   # assert used
    "PLR2004", # Magic value comparisons
    "G004",    # Logging f-strings
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY401",  # Redundant exception in logging.exception
    "S603",    # subprocess without shell equals true
    "S607",    # Starting process with partial path
    "BLE001",  # Blind except Exception
    "PTH123",  # open() should be replaced by Path.open()
    "S113",    # requests without timeout
    "PERF203", # try-except in loop
    "ARG002",  # Unused method argument
    "ANN401",  # Dynamically typed expressions (Any)
    "FA100",   # Missing from __future__ import annotations
    "ERA001",  # Commented code
    "E722",    # Bare except
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "N807",    # Function name should not start with __
    "D401",    # First line of docstring should be in imperative mood
    "B028",    # No explicit stacklevel in warnings
    "TRY300",  # Consider else block
    "TRY301",  # Abstract raise to inner function
    "ANN001",  # Missing function argument annotation
    "ANN002",  # Missing *args annotation
    "ANN003",  # Missing **kwargs annotation
    "PERF401", # List comprehension
    "RUF001",  # Ambiguous unicode character
    "SIM102",  # Use single if statement
    "S110",    # try-except-pass without logging
    "RUF009",  # Do not perform function call in dataclass defaults
]

[tool.ruff.lint.per-file-ignores]
"scripts/testing/__init__.py" = ["F401"]  # Unused imports in __init__
"scripts/testing/test_*.py" = ["S101"]    # Allow assert in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "kubernetes.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "untracked_backup"]
skips = ["B101", "B601"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.cache
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | __pycache__
  | untracked_backup
)/
'''

[tool.isort]
profile = "black"
line_length = 100

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=scripts --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
    "scripts/testing",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# YAML Lint configuration
[tool.yamllint]
extends = "relaxed"
rules.line-length.max = 120
rules.comments.min-spaces-from-content = 1
