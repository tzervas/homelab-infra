# Nginx Ingress Controller Configuration
# Generated by Terraform

controller:
  # Image configuration
  image:
    registry: k8s.gcr.io
    image: ingress-nginx/controller
    digest: ""
    pullPolicy: IfNotPresent
  
  # Replica configuration
  replicaCount: 1
  
  # Service configuration
  service:
    enabled: true
    type: ${service_type}
    %{ if load_balancer_ip != "" }
    loadBalancerIP: ${load_balancer_ip}
    %{ endif }
    ports:
      http: 80
      https: 443
    targetPorts:
      http: http
      https: https
    annotations:
      metallb.universe.tf/allow-shared-ip: "nginx-ingress"
  
  # Resource requirements
  resources:
    limits:
      cpu: 100m
      memory: 90Mi
    requests:
      cpu: 100m
      memory: 90Mi
  
  # Configuration
  config:
    %{ if enable_ssl_passthrough }
    enable-ssl-passthrough: "true"
    %{ endif }
    use-proxy-protocol: "false"
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
    proxy-body-size: "0"
    proxy-read-timeout: "600"
    proxy-send-timeout: "600"
    
  # SSL configuration
  %{ if default_ssl_certificate != "" }
  extraArgs:
    default-ssl-certificate: ${default_ssl_certificate}
  %{ endif }
  
  # Health checks
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3
  
  # Security context
  securityContext:
    capabilities:
      drop:
        - ALL
      add:
        - NET_BIND_SERVICE
    runAsUser: 101
    allowPrivilegeEscalation: true
  
  # Node selector
  nodeSelector:
    kubernetes.io/os: linux
  
  # Tolerations
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Equal
      effect: NoSchedule
    - key: node-role.kubernetes.io/control-plane
      operator: Equal
      effect: NoSchedule
  
  # Metrics
  %{ if enable_metrics }
  metrics:
    enabled: true
    service:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
    serviceMonitor:
      enabled: true
      additionalLabels: {}
      namespace: ""
      namespaceSelector: {}
      scrapeInterval: 30s
      targetLabels: []
      relabelings: []
      metricRelabelings: []
  %{ endif }
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    failurePolicy: Fail
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}
    annotations: {}
    
    service:
      annotations: {}
      externalIPs: []
      loadBalancerSourceRanges: []
      servicePort: 443
      type: ClusterIP
    
    createSecretJob:
      resources: {}
    
    patchWebhookJob:
      resources: {}
    
    patch:
      enabled: true
      image:
        registry: k8s.gcr.io
        image: ingress-nginx/kube-webhook-certgen
        tag: v1.3.0
        digest: ""
        pullPolicy: IfNotPresent
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations: []
      labels: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000

# Default backend
defaultBackend:
  enabled: false

# RBAC
rbac:
  create: true
  scope: false

# Pod security policy
podSecurityPolicy:
  enabled: false

# Service account
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}
